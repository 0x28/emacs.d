#+TITLE: emacs settings
* package setup
  Bootstraps use-package and sets the repositories.
  #+BEGIN_SRC emacs-lisp :results silent
    ;; set up package sources
    (require 'package)

    (setf package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                             ("melpa" . "https://melpa.org/packages/")))
    (package-initialize)

    ;; bootstrap `use-package'
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
  #+END_SRC

* evil
  Vim emulation for emacs.
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package evil
      :ensure t
      :demand
      :init
      (setf evil-want-keybinding nil)
      :bind*
      (:map evil-normal-state-map
            ("SPC f i" . my/edit-init-file)
            ("SPC f s" . my/ssh-connect)
            ("SPC q n" . save-buffers-kill-emacs)
            ("SPC n d" . narrow-to-defun)
            ("SPC n w" . widen))
      (:map evil-visual-state-map
            ("SPC n r" . narrow-to-region))
      :config
      (evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle)
      (evil-define-key 'normal org-mode-map (kbd "TAB") #'org-cycle)

      (setq evil-normal-state-tag
            (propertize " {N} " 'face '((:foreground "green")))
            evil-emacs-state-tag
            (propertize " {E} " 'face '((:foreground "orange")))
            evil-insert-state-tag
            (propertize " {I} " 'face '((:foreground "red")))
            evil-motion-state-tag
            (propertize " {M} " 'face '((:foreground "deep sky blue")))
            evil-visual-state-tag
            (propertize " {V} " 'face '((:foreground "grey80")))
            evil-replace-state-tag
            (propertize " {R} " 'face '((:foreground "yellow")))
            evil-operator-state-tag
            (propertize " {O} " 'face '((:foreground "purple"))))

      (setq evil-lookup-func (lambda () (interactive)
                               (call-interactively #'man)))
      (evil-mode))
  #+END_SRC

* evil collection
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package evil-collection
      :ensure t
      :config
      (setq evil-collection-key-blacklist (list "SPC"))
      (setq evil-collection-company-use-tng nil)
      (evil-collection-init))
  #+END_SRC

* evil multiple cursors
  #+BEGIN_SRC emacs-lisp :results silent
    (defun my/evil-mc-dispatch ()
      "Dispatch command to create multiple cursors."
      (interactive)
      (set-transient-map
       (let ((map (make-sparse-keymap)))
         (define-key map (kbd "C-n") #'evil-mc-make-and-goto-next-match)
         (define-key map (kbd "C-p") #'evil-mc-make-and-goto-prev-match)
         (define-key map (kbd "C-j") #'evil-mc-make-cursor-move-next-line)
         (define-key map (kbd "C-k") #'evil-mc-make-cursor-move-prev-line)
         (define-key map (kbd "C-a") #'evil-mc-make-all-cursors)
         (message "%s" (substitute-command-keys "\\{map}"))
         map)
       t))

    (use-package evil-mc
      :ensure t
      :commands (evil-mc-make-and-goto-next-match
                 evil-mc-make-and-goto-prev-match
                 evil-mc-make-cursor-move-next-line
                 evil-mc-make-cursor-move-prev-line
                 evil-mc-make-all-cursors)
      :bind* (:map evil-normal-state-map
                   ("SPC m" . my/evil-mc-dispatch))
      :config
      (setq evil-mc-undo-cursors-on-keyboard-quit t)
      (setq evil-mc-custom-known-commands
            '((newline (:insert . evil-mc-execute-call))))
      (global-evil-mc-mode 1))
  #+END_SRC

* company
  Generic settings for the completion framework company.
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package company
      :ensure t
      :config
      (add-hook 'after-init-hook #'global-company-mode)

      (define-key company-active-map (kbd "<tab>") #'company-complete-common-or-cycle)
      (define-key company-active-map (kbd "TAB") #'company-complete-common-or-cycle)

      (setq company-selection-wrap-around t
            company-idle-delay 0.1
            company-minimum-prefix-length 1))
  #+END_SRC

* ivy
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package ivy
      :ensure t
      :defer t
      :config
      (setq ivy-height 20
            ivy-re-builders-alist '((t . ivy--regex-ignore-order)))
      (ivy-mode))

    (use-package swiper
      :ensure t
      :bind* (("C-c f" . swiper)))

    (use-package counsel
      :ensure t
      :bind* (("M-x" . counsel-M-x)
              ("C-x C-f" . counsel-find-file)
              ("C-c d" . counsel-imenu)
              ("C-c r" . counsel-recentf)
              ("C-c k" . counsel-yank-pop))
      (:map evil-normal-state-map
            ("SPC SPC" . counsel-M-x)
            ("SPC f f" . counsel-find-file)
            ("SPC f r" . counsel-recentf)
            ("SPC f l" . counsel-locate))
      :config
      (setq counsel-find-file-at-point t)
      (setf (cdr (assoc 'counsel-M-x ivy-initial-inputs-alist)) "")
      (setq counsel-async-filter-update-time 100000) ;; every 0.1 seconds
      (counsel-mode))
  #+END_SRC

* dired
  #+BEGIN_SRC emacs-lisp :results silent
  (use-package dired-x
    :bind*
    (:map evil-normal-state-map
          ("SPC f d" . dired-jump-other-window))
    (:map dired-mode-map
          ("<tab>" . dired-omit-mode)
          ("<backtab>" . dired-hide-details-mode))
    :hook (dired-mode . dired-omit-mode)
    :hook (dired-mode . dired-hide-details-mode)
    :config
    (setq dired-auto-revert-buffer t)
    (setq dired-dwim-target t)
    (setq dired-omit-files "^\\.?#\\|^\\.[^.\n].*$"))
  #+END_SRC

* occur
  The function occur is defined within replace.el but it is missing a provide
  statement in emacs 25. Therefore the config has to be inside an init block.
  #+BEGIN_SRC emacs-lisp :results silent
  (use-package replace
    :hook (occur-mode . next-error-follow-minor-mode)
    :init
    (setq list-matching-lines-default-context-lines 3))
  #+END_SRC

* which key
  #+BEGIN_SRC emacs-lisp :results silent
    ;; show keybindings while typing
    (use-package which-key
      :ensure t
      :defer 1
      :config
      (which-key-mode)
      (setq which-key-idle-delay 0.5)
      (which-key-add-key-based-replacements
        "SPC b" "bookmarks"
        "SPC f" "files"
        "SPC h" "help"
        "SPC n" "narrow"
        "SPC p" "project"
        "SPC q" "quit"
        "SPC t" "tags"
        "SPC v" "version control"))
  #+END_SRC

* flycheck
  #+BEGIN_SRC emacs-lisp :results silent
    ;; syntax checking
    (use-package flycheck
      :ensure t
      :defer t
      :hook (prog-mode . flycheck-mode))
  #+END_SRC

* yasnippet
  #+BEGIN_SRC emacs-lisp :results silent
    ;; snippet completion
    (use-package yasnippet
      :ensure t
      :bind* ("C-c y" . yas-insert-snippet)
      :config
      (yas-global-mode 1))
  #+END_SRC
  Also load the snippets.
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package yasnippet-snippets
      :ensure t
      :defer t)
  #+END_SRC

* theme
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package gruvbox-theme
      :ensure t
      :config
      (if (daemonp)
          (add-hook 'after-make-frame-functions
                    (lambda (frame)
                      (with-selected-frame frame
                        (unless (member 'gruvbox-dark-hard custom-enabled-themes)
                          (load-theme 'gruvbox-dark-hard t)))))
        (load-theme 'gruvbox-dark-hard t)))
  #+END_SRC

* eshell
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package eshell
      :ensure t
      :bind* (("C-c s" . my/toggle-eshell))
      :hook
      (eshell-mode . (lambda ()
                       (local-set-key (kbd "C-r") #'counsel-esh-history)
                       (local-set-key (kbd "TAB") #'company-complete-common)
                       (local-set-key (kbd "<tab>") #'company-complete-common)
                       (setq-local global-hl-line-mode nil)
                       (setq-local company-idle-delay nil)
                       (setq-local company-backends (list #'company-capf))))
      :config
      (evil-set-initial-state 'eshell-mode 'emacs)
      (setf eshell-cmpl-ignore-case t
            eshell-error-if-no-glob t
            eshell-hist-ignoredups t
            eshell-scroll-to-bottom-on-input t
            eshell-cmpl-cycle-completions nil)
      :custom-face
      (eshell-prompt ((t (:inherit minibuffer-prompt :weight normal)))))

    (defun my/toggle-eshell ()
      "Open a new eshell window or switch to an existing one."
      (interactive)
      (let* ((eshell-buffer-name "*eshell*")
             (eshell-window (get-buffer-window eshell-buffer-name))
             (current-directory default-directory)
             (cd-to-default-dir (lambda ()
                                  (unless (string= default-directory
                                                   current-directory)
                                    (eshell/cd current-directory)
                                    (eshell-reset)))))
        (cond ((eq (selected-window) eshell-window)
               (delete-window))
              ((window-live-p eshell-window)
               (select-window eshell-window)
               (funcall cd-to-default-dir))
              (t
               (select-window
                (split-window (frame-root-window)
                              (round (* (window-height (frame-root-window))
                                        0.6666))
                              'below))
               (eshell)
               (funcall cd-to-default-dir)))))

  #+END_SRC

* whitespace
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package whitespace
      :ensure t
      :hook (prog-mode . whitespace-mode)
      :config
      (setq-default
       fill-column 80
       whitespace-line-column fill-column
       whitespace-style '(face trailing lines-tail)))
  #+END_SRC

* ggtags
  #+BEGIN_SRC emacs-lisp :results silent
  (use-package ggtags
    :ensure t
    :config
    (setq ggtags-sort-by-nearness t)
    :bind* (:map evil-normal-state-map
                 ("SPC t s" . ggtags-find-tag-regexp)
                 ("SPC t r" . ggtags-find-reference)
                 ("SPC t c" . ggtags-create-tags)
                 ("SPC t u" . ggtags-update-tags)
                 ("SPC t d" . ggtags-delete-tags)))
  #+END_SRC

* C, C++ config
  #+BEGIN_SRC emacs-lisp :results silent
    (defalias 'cxx-mode #'c++-mode)

    (use-package clang-format
      :ensure t
      :defer t)

    (use-package cc-mode
      :bind* (:map c-mode-map
                   ("C-c i" . clang-format-buffer)
                   ("C-c C-c" . comment-dwim))
      :bind* (:map c++-mode-map
                   ("C-c i" . clang-format-buffer)
                   ("C-c C-c" . comment-dwim))
      :hook
      ((c-mode . (lambda ()
                   (setq-local flycheck-gcc-language-standard "c99")
                   (setq-local flycheck-clang-language-standard "c99")))
       (c++-mode . (lambda ()
                     (setq-local flycheck-gcc-language-standard "c++11")
                     (setq-local flycheck-clang-language-standard "c++11")))
       ((c-mode c++-mode) . (lambda ()
                              (ggtags-mode 1)
                              (setq-local company-backends '((company-capf
                                                              company-yasnippet
                                                              company-keywords
                                                              company-gtags
                                                              company-files))))))
      :config
      (setq-default c-default-style "bsd"
                    c-basic-offset 4))
  #+END_SRC

* CMake config
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package cmake-mode
      :ensure t
      :config
      (setq cmake-tab-width 4))
  #+END_SRC

* compile
  #+BEGIN_SRC emacs-lisp :results silent
  (use-package compile
    :defer t
    :config
    (setq compilation-scroll-output 'first-error))
  #+END_SRC

* XML
  #+BEGIN_SRC emacs-lisp :results silent
  (use-package nxml-mode
    :defer t
    :config
    (setq nxml-child-indent 4))
  #+END_SRC

* version control
  #+BEGIN_SRC emacs-lisp :resutls silent
  (define-key evil-normal-state-map (kbd "SPC v") #'vc-prefix-map)
  (setq vc-svn-diff-switches "--force")
  #+END_SRC

* diff
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package diff
      :defer t
      :hook (diff-mode . whitespace-mode))
  #+END_SRC

* LaTeX config
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package tex-site
      :ensure auctex
      :hook (LaTeX-mode . TeX-source-correlate-mode)
      :defer t
      :config
      (setenv "XLIB_SKIP_ARGB_VISUALS" nil)
      (setf font-latex-fontify-sectioning 1.0)
      (setq-default TeX-view-program-selection
                    (quote (((output-dvi has-no-display-manager) "dvi2tty")
                            ((output-dvi style-pstricks) "dvips and gv")
                            (output-pdf "Okular")
                            (output-dvi "xdvi")
                            (output-pdf "Evince")
                            (output-html "xdg-open")))))
  #+END_SRC
  Align the equal signs in bibtex
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package bibtex
      :ensure t
      :defer t
      :config
      (setf bibtex-align-at-equal-sign t))
  #+END_SRC

* bookmarks
  Some bookmark keybindings.
  #+BEGIN_SRC emacs-lisp :results silent
  (use-package bookmark
    :ensure t
    :bind* (:map evil-normal-state-map
                 ("SPC b l" . list-bookmarks)
                 ("SPC b s" . bookmark-set)
                 ("SPC b j" . bookmark-jump)))
  #+END_SRC

* projectile
  #+BEGIN_SRC emacs-lisp :results silent
    (defun my/project-rg ()
      "Search with ripgrep within project."
      (interactive)
      (counsel-rg (thing-at-point 'symbol t)
                  (projectile-project-root)))

    (use-package projectile
      :ensure t
      :bind* (:map evil-normal-state-map
                   ("SPC p p" . projectile-switch-project)
                   ("SPC p f" . projectile-find-file)
                   ("SPC p c" . projectile-compile-project))
      :config
      (projectile-mode)
      (setq projectile-completion-system 'default)
      (setq projectile-enable-caching t)

      (push "CMakeLists.txt" projectile-project-root-files-top-down-recurring)

      ;; svn list is too slow in combination with svn externals
      (if (executable-find "fd")
          (setq projectile-svn-command "fd --color never --print0 --type f"))

      ;; define "SPC p" as additional prefix for projectile
      (define-key evil-normal-state-map (kbd "SPC p") #'projectile-command-map)
      (define-key evil-normal-state-map (kbd "SPC p s") #'my/project-rg))
  #+END_SRC

* quickrun
  #+BEGIN_SRC emacs-lisp :results silent
  (use-package quickrun
    :ensure t
    :bind* (("C-c x" . quickrun)))
  #+END_SRC

* dash
  #+BEGIN_SRC emacs-lisp :results silent
  (use-package counsel-dash
    :ensure t
    :init
    (defun my/view-docs-for-major-mode ()
      "Read the documentation for the programming language of the
  current major-mode. Use `counsel-dash-install-docset' or Zeal to
  download docsets."
      (interactive)
      (setq-local counsel-dash-docsets
                  (cdr (assoc major-mode '((sh-mode     . ("Bash"))
                                           (c-mode      . ("C"))
                                           (c++-mode    . ("C++" "Boost"))
                                           (lisp-mode   . ("Common_Lisp"))
                                           (cmake-mode  . ("CMake"))
                                           (latex-mode  . ("LaTeX"))
                                           (tex-mode    . ("LaTeX"))
                                           (python-mode . ("Python_2"))))))
      (if counsel-dash-docsets
          (counsel-dash (thing-at-point 'symbol t))
        (message "no docsets found for %s" major-mode)))
    :bind* (:map evil-normal-state-map
                 ("SPC h d" . my/view-docs-for-major-mode)))
  #+END_SRC

* smex
  Counsel-M-x doesn't provide a command history. But it uses smex when
  available.
  #+BEGIN_SRC emacs-lisp :results silent
  (use-package smex
    :ensure t
    :after counsel)
  #+END_SRC

* additional keywords
  Some words like "FIXME" and "TODO" should be highlighted in every programming
  mode. It doesn't matter if they're inside comments or not.
  #+BEGIN_SRC emacs-lisp :results silent
  (defun my/add-new-keywords()
    (font-lock-add-keywords
     nil
     '(("\\<\\(FIXME\\|fixme\\)\\>" 1 'font-lock-warning-face prepend)
       ("\\<\\(TODO\\|todo\\)\\>" 1 'font-lock-warning-face prepend)
       ("\\<\\(BUG\\|bug\\)\\>" 1 'font-lock-warning-face prepend)
       ("\\<\\(NOTE\\|note\\)\\>" 1 'font-lock-constant-face prepend))))

  (add-hook 'prog-mode-hook #'my/add-new-keywords)
  #+END_SRC

* sane defaults
  #+BEGIN_SRC emacs-lisp :results silent
    ;; don't show a startup message
    (setf inhibit-startup-message t)

    ;; no menu-bar
    (menu-bar-mode -1)

    ;; no tool-bar
    (tool-bar-mode -1)

    ;; highlight the current line
    (global-hl-line-mode)

    ;; ask "(y/n)?" and not "(yes/no)?"
    (fset #'yes-or-no-p #'y-or-n-p)

    ;; more information on describe-key
    (define-key (current-global-map) (kbd "C-h c") #'describe-key)

    ;; no blinking cursor
    (blink-cursor-mode -1)

    ;; no scroll bar
    (scroll-bar-mode -1)

    ;; start emacs maximized
    (add-to-list 'default-frame-alist '(fullscreen . maximized))

    ;; use hack font
    (add-to-list 'default-frame-alist '(font . "Hack-13"))

    ;; column numbers
    (column-number-mode 1)

    ;; save backups in .emacs.d
    (setf backup-directory-alist '(("." . "~/.emacs.d/.saves")))

    ;; no tabs
    (setq-default indent-tabs-mode nil)

    ;; update files when they change on disk
    (global-auto-revert-mode 1)

    ;; save more recent files
    (setf recentf-max-saved-items 100)

    ;; ask before killing emacs
    (setf confirm-kill-emacs #'y-or-n-p)

    ;; show parentheses
    (show-paren-mode)

    ;; automatically go to the help window
    (setf help-window-select t)

    ;; smoother scrolling
    (setf scroll-conservatively most-positive-fixnum)

    ;; resize windows proportionally
    (setf window-combination-resize t)

    ;; sentences have a single space at the end
    (setf sentence-end-double-space nil)

    ;; typed text replaces the selected text
    (delete-selection-mode 1)

    ;; hide minor-modes in mode-line
    (setf mode-line-modes '(:eval (propertize " [%m] "
                                              'face 'font-lock-constant-face)))

    ;; pretty lambdas
    (global-prettify-symbols-mode t)
    (setq prettify-symbols-unprettify-at-point 'right-edge)

    ;; don't accelerate mouse wheel scrolling
    (setq mouse-wheel-progressive-speed nil)

    ;; show off-screen matching parens when typing
    (setq blink-matching-paren 'echo)

    ;; add matching pairs automatically
    (electric-pair-mode 1)

    ;; make *scratch* unkillable
    (with-current-buffer "*scratch*"
      (emacs-lock-mode 'kill))
  #+END_SRC

* more keybindings
  Small functions used in the keybindings.
  #+BEGIN_SRC emacs-lisp :results silent
    (defun my/edit-init-file ()
      "Open the init file."
      (interactive)
      (find-file (expand-file-name "settings.org" user-emacs-directory)))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp :results silent
    (defun my/indent-buffer ()
      "Indent the current buffer."
      (interactive)
      (save-excursion
        (delete-trailing-whitespace)
        (unless (derived-mode-p 'makefile-mode)
          (indent-region (point-min) (point-max) nil)
          (untabify (point-min) (point-max)))))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp :results silent
    ;; from https://gist.github.com/3402786
    (defun my/toggle-maximize-buffer ()
      "Maximize buffer"
      (interactive)
      (if (and (= 1 (length (window-list)))
               (assoc ?_ register-alist))
          (jump-to-register ?_)
        (progn
          (window-configuration-to-register ?_)
          (delete-other-windows))))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp :results silent
    (defun my/local-hosts ()
      "Return a list of hosts in the local network."
      (split-string
       (shell-command-to-string
        "ip neigh show nud stale nud reachable | cut -d ' ' -f 1")))

    (defun my/ssh-connect ()
      "Connect to the home directory of a foreign host."
      (interactive)
      (let ((host (completing-read "host: " (my/local-hosts)))
            (user (read-string "user: ")))
        (message "connecting to %s@%s ..." user host)
        (find-file (concat "/ssh:" user "@" host ":~"))))

  #+END_SRC

  #+BEGIN_SRC emacs-lisp :results silent
    (defun my/ddg-dwim ()
      "Search duckduckgo.com for the symbol at point or the region if active."
      (interactive)
      (let* ((search-this
              (if (region-active-p)
                  (buffer-substring-no-properties (region-beginning)
                                                  (region-end))
                (thing-at-point 'symbol t)))
             (user-input (read-string (format "search term (default \"%s\"): "
                                              (or search-this ""))
                                      nil
                                      'ddg-input-history
                                      search-this)))
        (thread-last
          user-input
          url-hexify-string
          (concat "https://duckduckgo.com/?q=")
          browse-url)))

  #+END_SRC

  #+BEGIN_SRC emacs-lisp :results silent
    (defun my/kill-current-buffer ()
      "Kill the current buffer."
      (interactive)
      (kill-buffer (current-buffer)))

  #+END_SRC
  Emacs C-x and C-c keybindings.
  #+BEGIN_SRC emacs-lisp :results silent
    (global-set-key (kbd "C-x 1") #'my/toggle-maximize-buffer)
    (global-set-key (kbd "C-c i") #'my/indent-buffer)
    (global-set-key (kbd "C-x k") #'my/kill-current-buffer)
    (global-set-key (kbd "C-c g") #'my/ddg-dwim)
    (global-set-key (kbd "C-x C-b") #'ibuffer-other-window)

  #+END_SRC

