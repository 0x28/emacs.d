#+TITLE: emacs settings
#+PROPERTY: header-args :results silent
* package setup
  Bootstraps use-package and sets the repositories.
  #+begin_src emacs-lisp
    ;; set up package sources
    (require 'package)
    (require 'nsm)

    (setq network-security-level 'high
          gnutls-min-prime-bits 2048
          gnutls-verify-error t)

    (setq package-archives
          '(("gnu" . "https://elpa.gnu.org/packages/")
            ("melpa" . "https://melpa.org/packages/")))

    (setq package-archive-priorities
          '(("gnu" . 20)
            ("melpa" . 20)))

    (when (< emacs-major-version 27)
      (setq package-enable-at-startup nil)
      (package-initialize))

    ;; bootstrap `use-package'
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
  #+end_src

* custom file
  #+begin_src emacs-lisp
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    (load custom-file t)
  #+end_src

* calendar
  #+begin_src emacs-lisp
    (use-package calendar
      :defer t
      :hook (calendar-today-visible . calendar-mark-today)
      :custom
      (calendar-week-start-day 1))
  #+end_src

* consult
  #+begin_src emacs-lisp
    (use-package consult
      :ensure t
      :after evil
      :bind*
      ("C-c f" . consult-line)
      ("C-x b" . consult-buffer)
      ("C-c d" . consult-imenu)
      ("C-c k" . consult-yank-pop)
      ("<leader> f r" . consult-recent-file)
      ("<leader> f l" . consult-locate)
      ("<leader> f e" . consult-file-externally)
      :config
      (define-advice consult-line
          (:around (orig-fun &rest args) enable-preview)
        (let ((consult-preview-key 'any))
          (apply orig-fun args)))
      :custom
      (consult-preview-key nil)
      (consult-async-refresh-delay 0.1)
      (consult-line-point-placement 'match-end)) ;; Needed for M-j to work
  #+end_src

* devdocs
  #+begin_src emacs-lisp
    (defun my/view-docs-for-major-mode ()
      "Read the documentation for the programming language of the
    current major-mode. Use `devdocs-install' to download docsets."
      (interactive)
      (let ((devdocs-current-docs
             (cdr (assoc major-mode '((sh-mode      . ("bash"))
                                      (rust-mode    . ("rust"))
                                      (c-mode       . ("c"))
                                      (c++-mode     . ("c" "cpp"))
                                      (cmake-mode   . ("cmake~3.21"))
                                      (haskell-mode . ("haskell~9"))
                                      (latex-mode   . ("latex"))
                                      (tex-mode     . ("latex"))
                                      (python-mode  . ("python~3.9")))))))
        (devdocs-lookup (not devdocs-current-docs) (thing-at-point 'symbol t))))

    (use-package devdocs
      :ensure t
      :bind*
      ("<leader> h d" . my/view-docs-for-major-mode)
      :after evil
      :custom
      (devdocs-cache-timeout 3600))
  #+end_src

* ediff
  #+begin_src emacs-lisp
    (use-package ediff-wind
      :defer t
      :custom
      (ediff-split-window-function 'split-window-horizontally)
      (ediff-window-setup-function 'ediff-setup-windows-plain))
  #+end_src

* embark
  #+begin_src emacs-lisp
    (use-package embark
      :ensure t
      :bind*
      ("C-," . embark-act)
      ("C-h b" . embark-bindings)
      (:map minibuffer-mode-map
            ("C-c C-o" . embark-export)))

    (use-package embark-consult
      :ensure t
      :after (embark consult))
  #+end_src

* evil
  Vim emulation for emacs.
  #+begin_src emacs-lisp
    (use-package evil
      :ensure t
      :demand
      :custom
      (evil-want-keybinding nil)
      (evil-undo-system 'undo-tree)
      (evil-lookup-func (lambda () (interactive) (call-interactively #'man)))
      :bind*
      ("<leader> SPC" . execute-extended-command)
      ("<leader> f f " . find-file)
      ("<leader> f i" . my/edit-init-file)
      ("<leader> f s" . my/ssh-connect)
      ("<leader> q n" . save-buffers-kill-emacs)
      ("<leader> n d" . narrow-to-defun)
      ("<leader> n w" . widen)
      (:map evil-visual-state-map
            ("<leader> n r" . narrow-to-region))
      :config
      (define-key evil-normal-state-map (kbd "M-.") nil)
      (evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle)
      (evil-define-key 'normal org-mode-map (kbd "TAB") #'org-cycle)
      (evil-set-leader '(visual normal) (kbd "SPC"))

      (defun my/color-text (text color)
        (propertize text 'face `((:foreground ,color))))

      (setq evil-normal-state-tag   (my/color-text " N " "green")
            evil-emacs-state-tag    (my/color-text " E " "orange")
            evil-insert-state-tag   (my/color-text " I " "red")
            evil-motion-state-tag   (my/color-text " M " "deep sky blue")
            evil-visual-state-tag   (my/color-text " V " "grey80")
            evil-replace-state-tag  (my/color-text " R " "yellow")
            evil-operator-state-tag (my/color-text " O " "purple"))

      (evil-mode))
  #+end_src

* evil collection
  #+begin_src emacs-lisp
    (use-package evil-collection
      :ensure t
      :config
      (evil-collection-init)
      :custom
      (evil-collection-key-blacklist (list "SPC"))
      (evil-collection-company-use-tng nil))
  #+end_src

* evil multiple cursors
  #+begin_src emacs-lisp
    (defun my/evil-mc-dispatch ()
      "Dispatch command to create multiple cursors."
      (interactive)
      (set-transient-map
       (let ((map (make-sparse-keymap)))
         (define-key map (kbd "C-n") #'evil-mc-make-and-goto-next-match)
         (define-key map (kbd "C-p") #'evil-mc-make-and-goto-prev-match)
         (define-key map (kbd "C-a") #'evil-mc-make-all-cursors)
         (message "%s" (substitute-command-keys "\\{map}"))
         map)
       t))

    (defun my/evil-mc-lines ()
      "Create cursors for each line of the active selection."
      (interactive)
      (evil-mc-make-cursor-in-visual-selection-beg)
      (evil-mc-execute-for-all-cursors #'evil-normal-state))

    (evil-define-key 'normal 'global (kbd "<leader> m") #'my/evil-mc-dispatch)
    (evil-define-key 'visual 'global (kbd "<leader> m") #'my/evil-mc-lines)

    (use-package evil-mc
      :ensure t
      :commands (evil-mc-make-and-goto-next-match
                 evil-mc-make-and-goto-prev-match
                 evil-mc-make-all-cursors
                 evil-mc-make-cursor-in-visual-selection-beg)
      :config
      (setq evil-mc-undo-cursors-on-keyboard-quit t
            evil-mc-custom-known-commands
            '((newline                 (:insert . evil-mc-execute-call))
              (c-indent-line-or-region (:insert . evil-mc-execute-call))
              (wdired--self-insert     (:insert . evil-mc-execute-call))))
      (global-evil-mc-mode 1))
  #+end_src

* faces
  #+begin_src emacs-lisp
    (use-package faces
      :custom-face
      (help-argument-name ((t (:inherit (italic font-lock-function-name-face)))))
      (mode-line ((t (:overline "gainsboro" :background nil))))
      (mode-line-inactive ((t (:overline "dim gray" :background nil))))
      (vertical-border ((t (:foreground "black")))))
  #+end_src

* fill column indicator
  #+begin_src emacs-lisp
    (use-package display-fill-column-indicator
      :hook (prog-mode . display-fill-column-indicator-mode)
      :custom
      (display-fill-column-indicator-character nil))
  #+end_src

* org
  #+begin_src emacs-lisp
    (defun my/org-tag ()
      "Change org-mode tags of the current heading with completion."
      (interactive)
      (let* ((current-tags (org-get-tags nil t))
             (new-tags (completing-read-multiple
                        "change tags: "
                        (org-get-buffer-tags)
                        nil
                        nil
                        (concat (string-join current-tags ",") ","))))
        (org-set-tags (delete-dups new-tags))))

    (use-package org
      :bind*
      ("C-c a" . org-agenda)
      (:map org-mode-map
            ("C-c t" . my/org-tag))
      :custom-face
      (org-block-begin-line ((t (:underline nil :overline t))))
      (org-block-end-line ((t (:underline t :overline nil))))
      :custom
      (org-agenda-files (list org-directory))
      (org-src-fontify-natively t)
      (org-startup-folded t))

    (use-package org-protocol
      :demand
      :config
      (define-advice org-protocol-capture (:before (_) my/focus-capture)
        (select-frame-set-input-focus (window-frame)))
      (define-advice org-protocol-capture (:after (_) my/fill-capture)
        (fill-region (point-min) (point-max))))

    (use-package org-capture
      :bind* (("C-c c" . org-capture))
      :custom
      (org-capture-templates
       '(("w" "org-protocol web link" entry (file "Inbox.org")
          "* %?%:description\n  %:link\n\n  %:initial\n"
          :prepend t)
         ("r" "capture region" entry (file "Inbox.org")
          "* %?\n  %i\n"
          :prepend t))))
  #+end_src

* undo-tree
  #+begin_src emacs-lisp
    (use-package undo-tree
      :ensure t
      :demand
      :config
      (defun my/undo-tree-config ()
        (setq undo-tree-visualizer-diff t))
      (global-undo-tree-mode)
      :custom
      (undo-tree-visualizer-timestamps t)
      (undo-tree-visualizer-relative-timestamps t)
      :hook (undo-tree-mode . my/undo-tree-config))
  #+end_src

* company
  Generic settings for the completion framework company.
  #+begin_src emacs-lisp
    (use-package company
      :ensure t
      :demand
      :config
      (add-hook 'after-init-hook #'global-company-mode)

      (define-key company-active-map (kbd "<tab>") #'company-complete-common-or-cycle)
      (define-key company-active-map (kbd "TAB") #'company-complete-common-or-cycle)

      (define-advice company-capf
          (:around (orig-fun &rest args) set-completion-styles)
        "Don't use orderless for company."
        (let ((completion-styles my/default-completion-styles))
          (apply orig-fun args)))

      (defun my/setup-prog-mode-completion ()
        "Setup company backends for `prog-mode' derived modes."
        (setq-local company-backends
                    '((:separate company-capf company-files company-yasnippet)
                      company-keywords)))

      :hook (prog-mode . my/setup-prog-mode-completion)
      :custom
      (company-selection-wrap-around t)
      (company-idle-delay 0.1)
      (company-tooltip-minimum-width 40)
      (company-minimum-prefix-length 1))
  #+end_src

* isearch
  #+begin_src emacs-lisp
    (use-package isearch
      :bind*
      (:map isearch-mode-map
            ("M-j" . isearch-yank-word-or-char))
      :custom
      (isearch-lazy-count t))
  #+end_src

* dired
  #+begin_src emacs-lisp
    (use-package dired-x
      :bind*
      ("<leader> f d" . dired-jump-other-window)
      (:map dired-mode-map
            ("<tab>" . dired-omit-mode)
            ("<backtab>" . dired-hide-details-mode)
            ([remap consult-imenu] . dired-goto-file))
      :hook
      (dired-mode . dired-omit-mode)
      (dired-mode . dired-hide-details-mode)
      :config
      (evil-define-key 'normal dired-mode-map (kbd "C-o") #'dired-display-file)
      :custom
      (dired-auto-revert-buffer t)
      (dired-dwim-target t)
      (dired-omit-files "^\\.?#\\|^\\.[^.\n].*$"))

    (use-package wdired
      :defer t
      :config
      (evil-define-key 'normal wdired-mode-map (kbd "u") #'dired-undo))
  #+end_src

* occur
  #+begin_src emacs-lisp
    (use-package replace
      :hook (occur-mode . next-error-follow-minor-mode)
      :custom
      (list-matching-lines-default-context-lines 3))
  #+end_src

* which key
  #+begin_src emacs-lisp
    ;; show keybindings while typing
    (use-package which-key
      :ensure t
      :defer 1
      :config
      (which-key-mode)
      (which-key-add-key-based-replacements
        "<leader> b" "bookmarks"
        "<leader> e" "errors"
        "<leader> f" "files"
        "<leader> g" "git"
        "<leader> h" "help"
        "<leader> l" "lsp"
        "<leader> n" "narrow"
        "<leader> p" "project"
        "<leader> q" "quit"
        "<leader> v" "version control")
      :custom
      (which-key-idle-delay 0.5))
  #+end_src

* flycheck/flymake
  #+begin_src emacs-lisp
    (defun my/list-errors ()
      "Use flycheck or flymake to list errors."
      (interactive)
      (cond ((bound-and-true-p flycheck-mode) (flycheck-list-errors))
            ((bound-and-true-p flymake-mode) (flymake-show-diagnostics-buffer))
            (t (user-error "Neither flycheck nor flymake are enabled"))))

    (define-key evil-normal-state-map (kbd "<leader> e l") #'my/list-errors)

    (use-package flycheck
      :ensure t
      :defer t
      :hook (prog-mode . flycheck-mode))
  #+end_src

* yasnippet
  #+begin_src emacs-lisp
    (use-package yasnippet
      :ensure t
      :hook (prog-mode . yas-minor-mode))

    ;; Also load the snippets.
    (use-package yasnippet-snippets
      :ensure t
      :after yasnippet)
  #+end_src

* theme
  #+begin_src emacs-lisp
    (use-package doom-themes
      :ensure t
      :config
      (add-hook 'server-after-make-frame-hook
                (lambda ()
                  (unless (custom-theme-enabled-p 'doom-dracula)
                    (load-theme 'doom-dracula t))))
      (unless (daemonp)
        (load-theme 'doom-dracula t)))
  #+end_src

* eshell
** config
  #+begin_src emacs-lisp
    (use-package eshell
      :bind* (("C-c s" . my/toggle-eshell))
      :hook
      (eshell-mode . (lambda ()
                       (local-set-key (kbd "C-r") #'my/eshell-history)
                       (local-set-key (kbd "TAB") #'company-complete-common)
                       (local-set-key (kbd "<tab>") #'company-complete-common)
                       (setq-local global-hl-line-mode nil)
                       (setq-local company-idle-delay nil)
                       (setq-local company-backends (list #'company-capf))))
      :config
      (evil-set-initial-state 'eshell-mode 'emacs)
      (push '("\\*eshell\\*" display-buffer-at-bottom (window-height . 0.3))
            display-buffer-alist)
      :custom
      (eshell-cmpl-ignore-case t)
      (eshell-error-if-no-glob t)
      (eshell-hist-ignoredups t)
      (eshell-history-size 2048)
      (eshell-scroll-to-bottom-on-input t)
      (eshell-cmpl-cycle-completions nil)
      (eshell-last-dir-ring-size 128)
      (eshell-prompt-function #'my/eshell-prompt))
  #+end_src

** prompt
  #+begin_src emacs-lisp
  (defun my/eshell-prompt ()
    "Custom eshell prompt."
    (concat
     (when (> eshell-last-command-status 0)
       (propertize (format "(%d) " eshell-last-command-status) 'face 'error))
     (propertize (user-login-name) 'face 'font-lock-type-face)
     (propertize "@" 'face 'font-lock-comment-face)
     (propertize (system-name) 'face 'font-lock-function-name-face)
     " :: "
     (propertize (abbreviate-file-name (eshell/pwd)) 'face 'default)
     (if (= (user-uid) 0) " # " " $ ")))
  #+end_src

** popup
  #+begin_src emacs-lisp
    (defun my/toggle-eshell ()
      "Open a new eshell window or switch to an existing one."
      (interactive)
      (let ((current-directory default-directory))
        (if (eq major-mode 'eshell-mode)
            (delete-window)
          (eshell)
          (unless (string= default-directory
                           current-directory)
            (eshell/cd current-directory)
            (eshell-reset)))))
  #+end_src

** jump
  #+begin_src emacs-lisp
    (defun eshell/j ()
      "Jump to a previously visited directory."
      (eshell/cd
       (completing-read "jump: "
                        (delete-dups
                         (ring-elements eshell-last-dir-ring)))))
  #+end_src

** open
  #+begin_src emacs-lisp
    (defun eshell/o (&rest args)
      "Open ARGS in an external application.
    If there are no arguments open the `default-directory' in an
    external application."
      (if args
          (mapc #'consult-file-externally args)
        (consult-file-externally (expand-file-name default-directory))))
  #+end_src

** history
   #+begin_src emacs-lisp
     (defun my/eshell-history ()
       "Insert a previous eshell command into the prompt."
       (interactive)
       (goto-char (point-max))
       (insert (completing-read "insert previous command: "
                                (delete-dups
                                 (ring-elements eshell-history-ring)))))
   #+end_src

* whitespace
  #+begin_src emacs-lisp
    (use-package whitespace
      :hook ((prog-mode . whitespace-mode)
             (diff-mode . whitespace-mode))
      :custom
      (fill-column 80)
      (whitespace-line-column fill-column)
      (whitespace-style '(face trailing lines-tail))
      :custom-face
      (whitespace-line
       ((t (:underline (:color "cyan" :style wave) :foreground nil)))))
  #+end_src

* LaTeX
  #+begin_src emacs-lisp
    (use-package tex-mode
      :defer t
      :config
      (push '("\\*tex-shell\\*" display-buffer-no-window
              (allow-no-window . t))
            display-buffer-alist))
  #+end_src

* line numbers
  #+begin_src emacs-lisp
    (use-package display-line-numbers
      :hook (prog-mode . display-line-numbers-mode))
  #+end_src

* lsp
  #+begin_src emacs-lisp
    (use-package lsp-mode
      :ensure t
      :defer t
      :hook (rust-mode . lsp)
      :bind*
      ("<leader> l r" . lsp-rename)
      ("<leader> l a" . lsp-execute-code-action)
      :custom
      (lsp-completion-provider :none)
      (lsp-headerline-breadcrumb-enable nil))

    (use-package lsp-ui
      :ensure t
      :defer t)
  #+end_src

* mail
  #+begin_src emacs-lisp
    (use-package mu4e
      :bind* ("C-c m" . mu4e)
      :if (fboundp #'mu4e)
      :config
      (defun my/compose-mail-setup ()
        "Initialize mail settings using the `auth-sources' files."
        (interactive)
        (let* ((users (mapcar (lambda (entry) (plist-get entry :user))
                              (auth-source-search :max 20)))
               (user (completing-read "select user: " users))
               (entry (car (auth-source-search :user user :max 1))))
          (setq user-mail-address user
                smtpmail-smtp-server (plist-get entry :host)
                smtpmail-smtp-service (string-to-number (plist-get entry :port)))))

      (add-hook 'mu4e-compose-pre-hook #'my/compose-mail-setup)
      (setq mu4e-main-buffer-hide-personal-addresses t)
      :custom
      (mu4e-view-show-addresses t)
      (mu4e-get-mail-command "mbsync --all")
      (mu4e-change-filenames-when-moving t)
      (mu4e-completing-read-function #'completing-read)
      (shr-use-colors nil)
      (smtpmail-stream-type 'ssl)
      (message-send-mail-function #'smtpmail-send-it))
  #+end_src

* markdown
  #+begin_src emacs-lisp
    (use-package markdown-mode
      :defer t
      :custom-face
      (markdown-code-face
       ((t (:inherit default :background nil :foreground nil)))))
  #+end_src

* orderless
  #+begin_src emacs-lisp
    (defconst my/default-completion-styles '(basic partial-completion emacs22))
    (use-package orderless
      :ensure t
      :custom
      (completion-styles '(orderless))
      (orderless-component-separator #'orderless-escapable-split-on-space))
  #+end_src

* C, C++
  #+begin_src emacs-lisp
    (defalias 'cxx-mode #'c++-mode)

    (use-package clang-format
      :ensure t
      :defer t)

    (use-package cc-mode
      :defer t
      :config
      (dolist (map (list c-mode-map c++-mode-map))
        (define-key map (kbd "C-c i") #'clang-format-buffer))

      (defconst my-cc-style
        '((c-basic-offset . 4)
          (c-comment-only-line-offset . 0)
          (c-offsets-alist
           (innamespace . 0)
           (case-label . +)
           (statement-block-intro . +)
           (knr-argdecl-intro . +)
           (substatement-open . 0)
           (substatement-label . 0)
           (label . 0)
           (statement-cont . +)
           (inline-open . 0)
           (inexpr-class . 0))))

      (c-add-style "my-style" my-cc-style)
      :custom
      (c-default-style "my-style"))
  #+end_src

* Rust
  #+begin_src emacs-lisp
    (use-package rust-mode
      :ensure t
      :bind* (:map rust-mode-map
                   ("C-c i" . rust-format-buffer))
      :custom
      (lsp-rust-all-features t)
      (lsp-rust-server 'rust-analyzer)
      (lsp-rust-analyzer-proc-macro-enable t))
  #+end_src

* CMake
  #+begin_src emacs-lisp
    (use-package cmake-mode
      :ensure t
      :defer t
      :hook
      (cmake-mode . (lambda ()
                      (setq-local company-backends (list #'company-cmake))))
      :config
      (evil-define-key 'normal cmake-mode-map (kbd "<leader> h h") #'cmake-help)
      :custom
      (cmake-tab-width 4))
  #+end_src

* compile
  #+begin_src emacs-lisp
    (use-package compile
      :defer t
      :custom
      (compilation-scroll-output 'first-error))
  #+end_src

* align
  #+begin_src emacs-lisp
    (defun my/align-whitespace (begin end)
      "Align columns by whitespace between BEGIN and END."
      (interactive "r")
      (align-regexp begin end
                    "\\(\\s-*\\)\\s-" 1 0 t))

    (use-package align
      :bind*
      (:map evil-visual-state-map
            ("<leader> a a" . align)
            ("<leader> a r" . align-regexp)
            ("<leader> a w" . my/align-whitespace)))
  #+end_src

* version control
  Settings for the builtin vc.el.
  #+begin_src emacs-lisp
    (use-package vc
      :config
      (global-set-key (kbd "<leader> v") #'vc-prefix-map)
      (when (eq system-type 'windows-nt) ;; too slow
        (remove-hook 'find-file-hook #'vc-refresh-state))
      (setq vc-log-short-style '(directory file))
      :custom
      (vc-follow-symlinks t)
      (vc-git-annotate-switches '("-w" "-M")))
  #+end_src
  Magit keybindings.
  #+begin_src emacs-lisp
    (use-package magit
      :ensure t
      :bind*
      ("<leader> g s" . magit-status)
      ("<leader> g g" . magit-dispatch)
      ("<leader> g l" . magit-log-current)
      :custom
      (magit-diff-refine-hunk t))
  #+end_src

* vertico
  #+begin_src emacs-lisp
    (use-package vertico
      :ensure t
      :config
      (vertico-mode))
  #+end_src

* recentf
  #+begin_src emacs-lisp
    (use-package recentf
      :config
      (recentf-mode 1)
      (run-with-idle-timer (* 60 2) t #'recentf-save-list)
      :custom
      (recentf-max-saved-items 1000))
  #+end_src

* bookmarks
  Some bookmark keybindings.
  #+begin_src emacs-lisp
    (use-package bookmark
      :bind*
      ("<leader> b l" . list-bookmarks)
      ("<leader> b s" . bookmark-set)
      ("<leader> b j" . bookmark-jump))
  #+end_src

* projectile
  #+begin_src emacs-lisp
    (defun my/project-rg ()
      "Search with ripgrep within project.
    If the ripgrep command supports the --pcre2 flag, spaces can be
    used in the query."
      (interactive)
      (let* ((rg-sep " -- ")
             (minibuffer-setup-hook (cons (lambda () (search-backward rg-sep nil t))
                                          minibuffer-setup-hook)))
        (consult-ripgrep (projectile-project-root)
                         (concat (thing-at-point 'symbol t) rg-sep))))

    (defun my/projectile-project-find-function (dir)
      "Compatibility layer between projectile and project.el."
      (let ((root (projectile-project-root dir)))
        (and root (cons 'transient root))))

    (use-package projectile
      :ensure t
      :defer t
      :init
      (global-set-key (kbd "<leader> p") #'projectile-command-map)
      (autoload #'projectile-command-map "projectile.el" nil nil 'keymap)
      :config
      (push "CMakeLists.txt" projectile-project-root-files-top-down-recurring)
      (define-key projectile-command-map (kbd "s") #'my/project-rg)
      (add-to-list 'project-find-functions #'my/projectile-project-find-function)

      (projectile-mode)
      :custom
      (projectile-completion-system 'default)
      (projectile-enable-caching t))
  #+end_src

* quickrun
  #+begin_src emacs-lisp
    (use-package quickrun
      :ensure t
      :bind* ("C-c x" . quickrun))
  #+end_src

* ibuffer
  #+begin_src emacs-lisp
    (use-package ibuffer
      :bind ("C-x C-b" . ibuffer-other-window)
      :custom
      (ibuffer-default-sorting-mode 'major-mode))
  #+end_src

* additional keywords
  Some words like "FIXME" and "TODO" should be highlighted in every programming
  mode. It doesn't matter if they're inside comments or not.
  #+begin_src emacs-lisp
    (defun my/add-new-keywords()
      (font-lock-add-keywords
       nil
       '(("\\<\\(FIXME\\|fixme\\)\\>" 1 'font-lock-warning-face prepend)
         ("\\<\\(TODO\\|todo\\)\\>" 1 'font-lock-warning-face prepend)
         ("\\<\\(BUG\\|bug\\)\\>" 1 'font-lock-warning-face prepend)
         ("\\<\\(NOTE\\|note\\)\\>" 1 'font-lock-constant-face prepend))))

    (add-hook 'prog-mode-hook #'my/add-new-keywords)
  #+end_src

* sane defaults
** visual
  #+begin_src emacs-lisp
    ;; don't show a startup message
    (setq inhibit-startup-message t)
    ;; no blinking cursor
    (blink-cursor-mode -1)
    ;; highlight the current line
    (global-hl-line-mode)
    ;; column numbers
    (column-number-mode 1)
    ;; show matching parentheses
    (show-paren-mode)
    ;; pretty lambdas
    (add-hook 'emacs-lisp-mode-hook #'prettify-symbols-mode)
    (setq prettify-symbols-unprettify-at-point 'right-edge)
    ;; smoother scrolling
    (setq scroll-conservatively most-positive-fixnum)
    ;; resize windows proportionally
    (setq window-combination-resize t)
    ;; hide minor-modes in mode-line
    (setq mode-line-modes '((:eval (propertize " %[(%m)%] "
                                               'face 'font-lock-constant-face))))
    ;; mode-line position format
    (setq mode-line-position '(20 "%p L%l C%c"))
  #+end_src

** convenience
  #+begin_src emacs-lisp
    ;; save backups in .emacs.d
    (setq backup-directory-alist '(("." . "~/.emacs.d/.backups")))
    ;; save auto-save files (#file#) in .emacs.d
    (let ((auto-save-dir "~/.emacs.d/.autosaves/"))
      (make-directory auto-save-dir t)
      (setq auto-save-file-name-transforms `((".*" ,auto-save-dir t))))
    ;; update files when they change on disk
    (global-auto-revert-mode 1)
    ;; ask before killing emacs
    (setq confirm-kill-emacs #'y-or-n-p)
    ;; automatically go to the help window
    (setq help-window-select t)
    ;; show help on hover
    (customize-set-variable 'help-at-pt-display-when-idle t)
    ;; sentences have a single space at the end
    (setq sentence-end-double-space nil)
    ;; typed text replaces the selected text
    (delete-selection-mode 1)
    ;; don't accelerate mouse wheel scrolling
    (setq mouse-wheel-progressive-speed nil)
    ;; set scroll speed
    (setcar mouse-wheel-scroll-amount 5)
    ;; show off-screen matching parens when typing
    (setq blink-matching-paren 'echo)
    ;; add matching pairs automatically
    (electric-pair-mode 1)
    ;; make *scratch* unkillable
    (with-current-buffer "*scratch*"
      (emacs-lock-mode 'kill))
    ;; reduce the delay for creating frames and for using undo-tree
    (when (eq system-type 'gnu/linux)
      (setq x-wait-for-event-timeout nil))
    ;; ask "(y/n)?" and not "(yes/no)?"
    (defalias #'yes-or-no-p #'y-or-n-p)
    ;; more information on describe-key
    (global-set-key (kbd "C-h c") #'describe-key)
    ;; add a newline at the end of files
    (setq require-final-newline t)
    ;; no tabs
    (customize-set-variable 'indent-tabs-mode nil)
    ;; use M-o for other-window
    (global-set-key (kbd "M-o") #'next-window-any-frame)
    ;; utf-8 everywhere
    (prefer-coding-system 'utf-8)
    ;; disable suspend-frame
    (global-unset-key (kbd "C-x C-z"))
  #+end_src

* custom functions
  Small functions used in the keybindings.
** edit init file
   Function used to quickly edit my settings.org file.
  #+begin_src emacs-lisp
    (defun my/edit-init-file ()
      "Open the init file."
      (interactive)
      (find-file (expand-file-name "settings.org" user-emacs-directory)))
  #+end_src

** indent buffer
   This function removes trailing whitespace, indents the current buffer and
   removes tabs. For Makefiles it only removes trailing whitespace.
  #+begin_src emacs-lisp
    (defun my/indent-buffer ()
      "Indent and untabify the current buffer."
      (interactive)
      (save-excursion
        (delete-trailing-whitespace)
        (unless (derived-mode-p 'makefile-mode)
          (indent-region (point-min) (point-max) nil)
          (untabify (point-min) (point-max)))))

    (global-set-key (kbd "C-c i") #'my/indent-buffer)
  #+end_src

** toggle maximize buffer
   Original from https://gist.github.com/3402786.
  #+begin_src emacs-lisp
    (defun my/toggle-maximize-buffer ()
      "Maximize the current buffer and save the window configuration.
    A second call restores the old window configuration."
      (interactive)
      (if (and (one-window-p t)
               (assoc ?_ register-alist))
          (jump-to-register ?_)
        (window-configuration-to-register ?_)
        (delete-other-windows)))

    (global-set-key (kbd "C-x 1") #'my/toggle-maximize-buffer)
  #+end_src

** ssh connect
  #+begin_src emacs-lisp
    (defun my/ssh-connect (host user)
      "Connect to the home directory of a foreign HOST as USER using
    SSH. With prefix argument use sshx instead of ssh."
      (interactive "Mhost: \nMuser: ")
      (message "connecting to %s@%s ..." user host)
      (let ((method (if current-prefix-arg "sshx" "ssh")))
        (find-file (format "/%s:%s@%s:~" method user host))))
  #+end_src

** duckduckgo dwim
  #+begin_src emacs-lisp
    (defun my/ddg-dwim ()
      "Search duckduckgo.com for the symbol at point or the region if active."
      (interactive)
      (let* ((symbol (or (thing-at-point 'symbol t) ""))
             (user-input
              (if (region-active-p)
                  (buffer-substring-no-properties (region-beginning)
                                                  (region-end))
                (read-string (format "search term [default: \"%s\"]: " symbol)
                             nil
                             'ddg-input-history
                             symbol))))
        (thread-last user-input
          url-hexify-string
          (concat "https://duckduckgo.com/?q=")
          browse-url)))

    (global-set-key (kbd "C-c g") #'my/ddg-dwim)
  #+end_src

** kill current buffer
   Kill the current buffer without asking.
  #+begin_src emacs-lisp
    (defun my/kill-current-buffer ()
      "Kill the current buffer."
      (interactive)
      (kill-buffer (current-buffer)))

    (global-set-key (kbd "C-x k") #'my/kill-current-buffer)
  #+end_src

** yank words to minibuffer
  #+begin_src emacs-lisp
    (defun my/minibuffer-yank-word (&optional arg)
      "Yank ARG words from current line into minibuffer."
      (interactive "p")
      (let (text)
        (with-current-buffer (cadr (buffer-list))
          (let* ((beg (point))
                 (bol (line-beginning-position))
                 (eol (line-end-position))
                 (end (progn (forward-word arg)
                             (goto-char (max bol (min (point) eol))))))
            (setq text (buffer-substring-no-properties beg end))
            (pulse-momentary-highlight-region beg end 'region)))
        (when text
          (insert (replace-regexp-in-string "  +" " " text t t)))))

    (define-key minibuffer-local-map (kbd "M-j") #'my/minibuffer-yank-word)
  #+end_src

** confirm closing emacsclient frames
  #+begin_src emacs-lisp
    (defun my/confirm-delete-frame (&optional arg)
      "Ask for confirmation when closing frames.
    With prefix ARG, silently save all file-visiting buffers, then
    delete the selected frame."
      (interactive "P")
      (when (y-or-n-p "Close frame? ")
        (save-some-buffers arg)
        (delete-frame))
      (message ""))

    (when (daemonp)
      (global-set-key [remap save-buffers-kill-terminal] #'my/confirm-delete-frame))
  #+end_src

** create TAGS file
  #+begin_src emacs-lisp
    (defun my/create-tags (dir extensions)
      "Create TAGS for files with EXTENSIONS in directory DIR."
      (interactive "Dproject root: \nMenter file extensions: ")
      (let* ((default-directory dir)
             (extensions (split-string extensions))
             (extensions (mapcar (lambda (e) (concat "*." e))
                              extensions)))
        (shell-command
         (concat
          (find-cmd
           '(prune (name ".git" ".svn" ".CVS"))
           `(or (iname ,@extensions)))
          " | etags -"))
        (let ((tags-revert-without-query t))
          (visit-tags-table dir))))
  #+end_src

** revert buffer safely
  #+begin_src emacs-lisp
    (defun my/revert-buffer (arg)
      "Revert the current buffer if the associated file wasn't modified.
    With prefix argument ARG reinitialize the modes."
      (interactive "P")
      (if (and (buffer-modified-p)
               (buffer-file-name))
          (message "Can't revert modified file!")
        (revert-buffer 'noauto 'noconfirm (not arg))
        (message "Buffer reverted")))

    (global-set-key (kbd "<f5>") #'my/revert-buffer)
  #+end_src

