#+TITLE: emacs settings
#+PROPERTY: header-args :results silent
* package setup
  Bootstraps use-package and sets the repositories.
  #+BEGIN_SRC emacs-lisp
    ;; set up package sources
    (require 'package)
    (require 'nsm)

    (setq network-security-level 'high
          gnutls-min-prime-bits 2048
          gnutls-verify-error t
          package-enable-at-startup nil)

    (setq package-archives
          '(("gnu" . "https://elpa.gnu.org/packages/")
            ("melpa" . "https://melpa.org/packages/")
            ("gnu-mirror" . "https://gitlab.com/0x28/elpa-mirror/raw/master/gnu/")))

    (setq package-archive-priorities
          '(("gnu" . 20)
            ("melpa" . 20)
            ("gnu-mirror" . 0)))

    (package-initialize)

    ;; bootstrap `use-package'
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
  #+END_SRC

* custom file
  #+BEGIN_SRC emacs-lisp
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    (load custom-file t)
  #+END_SRC

* evil
  Vim emulation for emacs.
  #+BEGIN_SRC emacs-lisp
    (use-package evil
      :ensure t
      :demand
      :custom
      (evil-want-keybinding nil)
      (evil-lookup-func (lambda () (interactive) (call-interactively #'man)))
      :bind*
      (:map evil-normal-state-map
            ("SPC f i" . my/edit-init-file)
            ("SPC f s" . my/ssh-connect)
            ("SPC q n" . save-buffers-kill-emacs)
            ("SPC n d" . narrow-to-defun)
            ("SPC n w" . widen))
      (:map evil-visual-state-map
            ("SPC n r" . narrow-to-region))
      :config
      (define-key evil-normal-state-map (kbd "M-.") nil)
      (evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle)
      (evil-define-key 'normal org-mode-map (kbd "TAB") #'org-cycle)

      (defun my/color-text (text color)
        (propertize text 'face `((:foreground ,color))))

      (setq evil-normal-state-tag   (my/color-text " N " "green")
            evil-emacs-state-tag    (my/color-text " E " "orange")
            evil-insert-state-tag   (my/color-text " I " "red")
            evil-motion-state-tag   (my/color-text " M " "deep sky blue")
            evil-visual-state-tag   (my/color-text " V " "grey80")
            evil-replace-state-tag  (my/color-text " R " "yellow")
            evil-operator-state-tag (my/color-text " O " "purple"))

      (evil-mode))
  #+END_SRC

* evil collection
  #+BEGIN_SRC emacs-lisp
    (use-package evil-collection
      :ensure t
      :config
      (evil-collection-init)
      :custom
      (evil-collection-key-blacklist (list "SPC"))
      (evil-collection-company-use-tng nil))
  #+END_SRC

* evil multiple cursors
  #+BEGIN_SRC emacs-lisp
    (defun my/evil-mc-dispatch ()
      "Dispatch command to create multiple cursors."
      (interactive)
      (set-transient-map
       (let ((map (make-sparse-keymap)))
         (define-key map (kbd "C-n") #'evil-mc-make-and-goto-next-match)
         (define-key map (kbd "C-p") #'evil-mc-make-and-goto-prev-match)
         (define-key map (kbd "C-a") #'evil-mc-make-all-cursors)
         (message "%s" (substitute-command-keys "\\{map}"))
         map)
       t))

    (defun my/evil-mc-lines ()
      "Create cursors for each line of the active selection."
      (interactive)
      (evil-mc-make-cursor-in-visual-selection-beg)
      (evil-normal-state))

    (evil-define-key 'normal 'global (kbd "SPC m") #'my/evil-mc-dispatch)
    (evil-define-key 'visual 'global (kbd "SPC m") #'my/evil-mc-lines)

    (use-package evil-mc
      :ensure t
      :commands (evil-mc-make-and-goto-next-match
                 evil-mc-make-and-goto-prev-match
                 evil-mc-make-all-cursors
                 evil-mc-make-cursor-in-visual-selection-beg)
      :config
      (setq evil-mc-undo-cursors-on-keyboard-quit t
            evil-mc-custom-known-commands
            '((newline                 (:insert . evil-mc-execute-call))
              (c-indent-line-or-region (:insert . evil-mc-execute-call))
              (upcase-word             (:default . evil-mc-execute-default-call-with-count))
              (downcase-word           (:default . evil-mc-execute-default-call-with-count))))
      (global-evil-mc-mode 1))
  #+END_SRC

* faces
  #+BEGIN_SRC emacs-lisp
    (use-package faces
      :custom-face
      (help-argument-name ((t (:inherit (italic font-lock-function-name-face)))))
      (mode-line ((t (:overline "gainsboro" :background nil))))
      (mode-line-inactive ((t (:overline "dim gray" :background nil)))))
  #+END_SRC

* org
  #+BEGIN_SRC emacs-lisp
    (use-package org
      :custom-face
      (org-block-begin-line ((t (:box -1))))
      (org-block-end-line ((t (:box -1))))
      :custom
      (org-agenda-files (list org-directory))
      (org-src-fontify-natively t))

    (use-package org-protocol
      :demand
      :config
      (defadvice org-protocol-capture (before my/focus-capture () activate)
        (select-frame-set-input-focus (window-frame)))
      (defadvice org-protocol-capture (after my/fill-capture () activate)
        (fill-region (point-min) (point-max))))

    (use-package org-capture
      :defer t
      :custom
      (org-capture-templates
       '(("w" "org-protocol web link" entry (file "Inbox.org")
          "* %:description\n  %:link\n\n  %?%:initial\n"))))
  #+END_SRC

* undo-tree
  #+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :ensure t
      :config
      (defun my/undo-tree-config ()
        (setq undo-tree-visualizer-diff t))
      :custom
      (undo-tree-visualizer-timestamps t)
      (undo-tree-visualizer-relative-timestamps t)
      :hook (undo-tree-mode . my/undo-tree-config))
  #+END_SRC

* company
  Generic settings for the completion framework company.
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :config
      (add-hook 'after-init-hook #'global-company-mode)

      (define-key company-active-map (kbd "<tab>") #'company-complete-common-or-cycle)
      (define-key company-active-map (kbd "TAB") #'company-complete-common-or-cycle)

      (defconst my/company-programming-backends
        '((:separate
           company-capf
           company-files
           company-yasnippet)
          company-keywords))
      :custom
      (company-selection-wrap-around t)
      (company-idle-delay 0.1)
      (company-tooltip-minimum-width 40)
      (company-minimum-prefix-length 1))
  #+END_SRC

* ivy
  #+BEGIN_SRC emacs-lisp
    (use-package ivy
      :ensure t
      :init
      (setq completing-read-function #'ivy-completing-read)
      :bind* (("C-x b" . ivy-switch-buffer))
      :config
      (setq ivy-height 20
            ivy-re-builders-alist '((t . ivy--regex-ignore-order))
            ivy-use-virtual-buffers t
            ivy-virtual-abbreviate 'abbreviate
            ivy-use-selectable-prompt t)
      (ivy-mode))

    (use-package swiper
      :ensure t
      :bind* (("C-c f" . swiper)))

    (use-package counsel
      :ensure t
      :bind* (("M-x" . counsel-M-x)
              ("C-x C-f" . counsel-find-file)
              ("C-h f" . counsel-describe-function)
              ("C-h v" . counsel-describe-variable)
              ("C-h b" . counsel-descbinds)
              ("C-c d" . counsel-imenu)
              ("C-c r" . counsel-recentf)
              ("C-c k" . counsel-yank-pop))
      (:map evil-normal-state-map
            ("SPC SPC" . counsel-M-x)
            ("SPC f f" . counsel-find-file)
            ("SPC f r" . counsel-recentf)
            ("SPC f l" . counsel-locate))
      :config
      (setq counsel-find-file-at-point t)
      (setf (cdr (assoc 'counsel-M-x ivy-initial-inputs-alist)) "")
      (setq counsel-async-filter-update-time 100000) ;; every 0.1 seconds
      (counsel-mode))
  #+END_SRC

* dired
  #+BEGIN_SRC emacs-lisp
    (use-package dired-x
      :bind*
      (:map evil-normal-state-map
            ("SPC f d" . dired-jump-other-window))
      (:map dired-mode-map
            ("<tab>" . dired-omit-mode)
            ("<backtab>" . dired-hide-details-mode))
      :hook
      (dired-mode . dired-omit-mode)
      (dired-mode . dired-hide-details-mode)
      :config
      (evil-define-key 'normal dired-mode-map (kbd "C-o") #'dired-display-file)
      :custom
      (dired-auto-revert-buffer t)
      (dired-dwim-target t)
      (dired-omit-files "^\\.?#\\|^\\.[^.\n].*$"))
  #+END_SRC

* occur
  #+BEGIN_SRC emacs-lisp
    (use-package replace
      :hook (occur-mode . next-error-follow-minor-mode)
      :custom
      (list-matching-lines-default-context-lines 3))
  #+END_SRC

* which key
  #+BEGIN_SRC emacs-lisp
    ;; show keybindings while typing
    (use-package which-key
      :ensure t
      :defer 1
      :config
      (which-key-mode)
      (which-key-add-key-based-replacements
        "SPC b" "bookmarks"
        "SPC e" "errors"
        "SPC f" "files"
        "SPC g" "git"
        "SPC h" "help"
        "SPC n" "narrow"
        "SPC p" "project"
        "SPC q" "quit"
        "SPC v" "version control")
      :custom
      (which-key-idle-delay 0.5))
  #+END_SRC

* flycheck/flymake
  #+BEGIN_SRC emacs-lisp
    (defun my/list-errors ()
      "Use flycheck or flymake to list errors."
      (interactive)
      (cond ((bound-and-true-p flycheck-mode) (flycheck-list-errors))
            ((bound-and-true-p flymake-mode) (flymake-show-diagnostics-buffer))
            (t (user-error "Neither flycheck nor flymake are enabled"))))

    (define-key evil-normal-state-map (kbd "SPC e l") #'my/list-errors)

    (use-package flycheck
      :ensure t
      :defer t
      :hook (prog-mode . flycheck-mode))
  #+END_SRC

* yasnippet
  #+BEGIN_SRC emacs-lisp
    ;; snippet completion
    (use-package yasnippet
      :ensure t
      :bind* ("C-c y" . yas-insert-snippet)
      :hook (prog-mode . yas-minor-mode)
      :config
      (dolist (key (list "TAB" "<tab>"))
        (define-key yas-minor-mode-map (kbd key) nil)))
  #+END_SRC
  Also load the snippets.
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet-snippets
      :ensure t
      :after yasnippet)
  #+END_SRC

* theme
  #+BEGIN_SRC emacs-lisp
    (use-package doom-themes
      :ensure t
      :config
      (if (daemonp)
          (add-hook 'after-make-frame-functions
                    (lambda (frame)
                      (with-selected-frame frame
                        (unless (member 'doom-dracula custom-enabled-themes)
                          (load-theme 'doom-dracula t)))))
        (load-theme 'doom-dracula t)))
  #+END_SRC

* eshell
** config
  #+BEGIN_SRC emacs-lisp
    (use-package eshell
      :ensure t
      :bind* (("C-c s" . my/toggle-eshell))
      :hook
      (eshell-mode . (lambda ()
                       (local-set-key (kbd "C-r") #'counsel-esh-history)
                       (local-set-key (kbd "TAB") #'company-complete-common)
                       (local-set-key (kbd "<tab>") #'company-complete-common)
                       (setq-local global-hl-line-mode nil)
                       (setq-local company-idle-delay nil)
                       (setq-local company-backends (list #'company-capf))))
      :config
      (evil-set-initial-state 'eshell-mode 'emacs)
      :custom
      (eshell-cmpl-ignore-case t)
      (eshell-error-if-no-glob t)
      (eshell-hist-ignoredups t)
      (eshell-history-size 2048)
      (eshell-scroll-to-bottom-on-input t)
      (eshell-cmpl-cycle-completions nil)
      (eshell-last-dir-ring-size 128)
      (eshell-prompt-function #'my/eshell-prompt))
  #+END_SRC

** prompt
  #+BEGIN_SRC emacs-lisp
  (defun my/eshell-prompt ()
    "Custom eshell prompt."
    (concat
     (when (> eshell-last-command-status 0)
       (propertize (format "(%d) " eshell-last-command-status) 'face 'error))
     (propertize (user-login-name) 'face 'font-lock-type-face)
     (propertize "@" 'face 'font-lock-comment-face)
     (propertize (system-name) 'face 'font-lock-function-name-face)
     " :: "
     (propertize (abbreviate-file-name (eshell/pwd)) 'face 'default)
     (if (= (user-uid) 0) " # " " $ ")))
  #+END_SRC

** popup
  #+BEGIN_SRC emacs-lisp
    (defun my/toggle-eshell ()
      "Open a new eshell window or switch to an existing one."
      (interactive)
      (let* ((eshell-window (get-buffer-window "*eshell*"))
             (current-directory default-directory)
             (cd-to-default-dir (lambda ()
                                  (unless (string= default-directory
                                                   current-directory)
                                    (eshell/cd current-directory)
                                    (eshell-reset)))))
        (cond ((eq (selected-window) eshell-window)
               (delete-window))
              ((window-live-p eshell-window)
               (select-window eshell-window)
               (funcall cd-to-default-dir))
              (t
               (select-window
                (split-window (frame-root-window)
                              (/ (frame-height) -3)
                              'below))
               (eshell)
               (funcall cd-to-default-dir)))))
  #+END_SRC

** jump
  #+BEGIN_SRC emacs-lisp
    (defun eshell/j ()
      "Jump to a previously visited directory."
      (eshell/cd
       (completing-read "jump: "
                        (delete-dups
                         (ring-elements eshell-last-dir-ring)))))
  #+END_SRC

** open
  #+BEGIN_SRC emacs-lisp
    (defun eshell/o (&rest args)
      "Open ARGS in an external application.
    If there are no arguments open the `default-directory' in an
    external application."
      (if args
          (mapc #'my/open-externally args)
        (my/open-externally default-directory)))
  #+END_SRC

* whitespace
  #+BEGIN_SRC emacs-lisp
    (use-package whitespace
      :ensure t
      :hook ((prog-mode . whitespace-mode)
             (diff-mode . whitespace-mode))
      :custom
      (fill-column 80)
      (whitespace-line-column fill-column)
      (whitespace-style '(face trailing lines-tail)))
  #+END_SRC

* line numbers
  #+BEGIN_SRC emacs-lisp
    (use-package display-line-numbers
      :if (fboundp 'display-line-numbers-mode)
      :hook (prog-mode . display-line-numbers-mode))
  #+END_SRC

* mail
  #+BEGIN_SRC emacs-lisp
    (use-package mu4e
      :bind* ("C-c m" . mu4e)
      :if (fboundp #'mu4e)
      :config
      (defun my/compose-mail ()
        "Compose mail using the `auth-sources' files."
        (interactive)
        (let* ((users (mapcar (lambda (entry) (plist-get entry :user))
                              (auth-source-search :max 20)))
               (user (completing-read "select user: " users))
               (entry (car (auth-source-search :user user :max 1))))
          (setq user-mail-address user ;; setq because mu4e runs asynchronously
                smtpmail-smtp-server (plist-get entry :host)
                smtpmail-smtp-service (string-to-number (plist-get entry :port)))
          (mu4e~start #'mu4e-compose-new)))

      (evil-define-key 'normal mu4e-main-mode-map (kbd "C") #'my/compose-mail)
      :custom
      (mu4e-view-show-addresses t)
      (mu4e-main-buffer-hide-personal-addresses t)
      (mu4e-get-mail-command "mbsync --all")
      (mu4e-change-filenames-when-moving t)
      (mu4e-completing-read-function #'completing-read)
      (mu4e-view-actions '(("browse message" . mu4e-action-view-in-browser)))
      (shr-use-colors nil)
      (smtpmail-stream-type 'ssl)
      (message-send-mail-function #'smtpmail-send-it))
  #+END_SRC

* C, C++
  #+BEGIN_SRC emacs-lisp
    (defalias 'cxx-mode #'c++-mode)

    (use-package clang-format
      :ensure t
      :defer t)

    (defun my/c-and-c++-config ()
      "Setup C and C++ config."
      (setq-local company-backends my/company-programming-backends))

    (use-package cc-mode
      :hook (((c-mode c++-mode) . my/c-and-c++-config))
      :config
      (dolist (map (list c-mode-map c++-mode-map))
        (define-key map (kbd "C-c i") #'clang-format-buffer))

      (defconst my-cc-style
        '((c-basic-offset . 4)
          (c-comment-only-line-offset . 0)
          (c-offsets-alist
           (innamespace . 0)
           (case-label . +)
           (statement-block-intro . +)
           (knr-argdecl-intro . +)
           (substatement-open . 0)
           (substatement-label . 0)
           (label . 0)
           (statement-cont . +)
           (inline-open . 0)
           (inexpr-class . 0))))

      (c-add-style "my-style" my-cc-style)
      :custom
      (c-default-style "my-style"))
  #+END_SRC

* lsp
  #+BEGIN_SRC emacs-lisp
    (use-package lsp-mode
      :ensure t
      :defer t)
  #+END_SRC

* Rust
  #+BEGIN_SRC emacs-lisp
    (use-package rust-mode
      :ensure t
      :bind* (:map rust-mode-map
                   ("C-c i" . rust-format-buffer))
      :hook (rust-mode . (lambda ()
                           (setq-local company-backends my/company-programming-backends)))
      :hook (rust-mode . lsp)
      :custom
      (lsp-rust-all-features t)
      (lsp-rust-server 'rust-analyzer))
  #+END_SRC

* CMake
  #+BEGIN_SRC emacs-lisp
    (use-package cmake-mode
      :ensure t
      :custom
      (cmake-tab-width 4))
  #+END_SRC

* compile
  #+BEGIN_SRC emacs-lisp
    (use-package compile
      :defer t
      :bind* (:map compilation-mode-map
                   ("SPC" . nil))
      :custom
      (compilation-scroll-output 'first-error))
  #+END_SRC

* align
  #+BEGIN_SRC emacs-lisp
    (defun my/align-whitespace (begin end)
      "Align columns by whitespace between BEGIN and END."
      (interactive "r")
      (align-regexp begin end
                    "\\(\\s-*\\)\\s-" 1 0 t))

    (use-package align
        :bind* (:map evil-visual-state-map
                     ("SPC a a" . align)
                     ("SPC a r" . align-regexp)
                     ("SPC a w" . my/align-whitespace)))
  #+END_SRC

* version control
  Settings for the builtin vc.el.
  #+BEGIN_SRC emacs-lisp
    (use-package vc
      :config
      (evil-define-key '(normal visual) 'global (kbd "SPC v") #'vc-prefix-map)
      (when (eq system-type 'windows-nt) ;; too slow
        (remove-hook 'find-file-hook #'vc-refresh-state))
      :custom
      (vc-follow-symlinks t))
  #+END_SRC
  Magit keybindings.
  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :bind* (:map evil-normal-state-map
                   ("SPC g s" . magit-status)
                   ("SPC g g" . magit-dispatch)
                   ("SPC g l" . magit-log-current))
      :custom
      (magit-diff-refine-hunk t))

    (use-package evil-magit
      :ensure t
      :after magit)
  #+END_SRC

* recentf
  #+BEGIN_SRC emacs-lisp
    (use-package recentf
      :config
      (recentf-mode 1)
      (run-with-idle-timer (* 60 2) t #'recentf-save-list)
      :custom
      (recentf-max-saved-items 100))
  #+END_SRC

* LaTeX
  #+BEGIN_SRC emacs-lisp
    (use-package tex
      :ensure auctex
      :hook (LaTeX-mode . TeX-source-correlate-mode)
      :defer t
      :config
      (setq font-latex-fontify-sectioning 1.0)
      (push '(output-pdf "Okular") TeX-view-program-selection))
  #+END_SRC

* bookmarks
  Some bookmark keybindings.
  #+BEGIN_SRC emacs-lisp
    (use-package bookmark
      :ensure t
      :bind* (:map evil-normal-state-map
                   ("SPC b l" . list-bookmarks)
                   ("SPC b s" . bookmark-set)
                   ("SPC b j" . bookmark-jump)))
  #+END_SRC

* projectile
  #+BEGIN_SRC emacs-lisp
    (defun my/project-rg ()
      "Search with ripgrep within project. If the ripgrep command
        supports the --pcre2 flag, spaces can be used in the query."
      (interactive)
      (let* ((rg-sep " -- ")
             (ivy-hooks-alist
              '((counsel-rg . (lambda () (search-backward rg-sep nil t))))))
        (counsel-rg (concat (thing-at-point 'symbol t) rg-sep)
                    (projectile-project-root))))

    (use-package projectile
      :ensure t
      :defer t
      :init
      ;; define "SPC p" as additional prefix for projectile
      (define-key evil-normal-state-map (kbd "SPC p") #'projectile-command-map)
      (autoload #'projectile-command-map "projectile" nil t 'keymap)
      :config
      (projectile-mode)

      (push "CMakeLists.txt" projectile-project-root-files-top-down-recurring)

      (define-key projectile-command-map (kbd "s") #'my/project-rg)

      ;; compatibility layer between projectile and project.el
      (defun my/projectile-project-find-function (dir)
        (let ((root (projectile-project-root dir)))
          (and root (cons 'transient root))))

      (require 'project)
      (add-to-list 'project-find-functions #'my/projectile-project-find-function)
      :custom
      (projectile-completion-system 'default)
      (projectile-enable-caching t))
  #+END_SRC

* quickrun
  #+BEGIN_SRC emacs-lisp
    (use-package quickrun
      :ensure t
      :bind* (("C-c x" . quickrun)))
  #+END_SRC

* dash
  #+BEGIN_SRC emacs-lisp
    (use-package counsel-dash
      :ensure t
      :commands (dash-docs-installed-docsets)
      :init
      (defun my/view-docs-for-major-mode ()
        "Read the documentation for the programming language of the
    current major-mode. Use `counsel-dash-install-docset' or Zeal to
    download docsets."
        (interactive)
        (let ((counsel-dash-docsets
               (or (cdr (assoc major-mode '((sh-mode     . ("Bash"))
                                            (rust-mode   . ("Rust"))
                                            (c-mode      . ("C"))
                                            (c++-mode    . ("C++" "Boost"))
                                            (lisp-mode   . ("Common_Lisp"))
                                            (cmake-mode  . ("CMake"))
                                            (latex-mode  . ("LaTeX"))
                                            (tex-mode    . ("LaTeX"))
                                            (python-mode . ("Python_3")))))
                   (list (completing-read "docset: "
                                          (dash-docs-installed-docsets))))))
          (counsel-dash (thing-at-point 'symbol t))))
      :bind* (:map evil-normal-state-map
                   ("SPC h d" . my/view-docs-for-major-mode)))
  #+END_SRC

* smex
  Counsel-M-x doesn't provide a command history. But it uses smex when
  available.
  #+BEGIN_SRC emacs-lisp
    (use-package smex
      :ensure t
      :after counsel)
  #+END_SRC

* ibuffer
  #+BEGIN_SRC emacs-lisp
    (use-package ibuffer
      :bind ("C-x C-b" . ibuffer-other-window)
      :custom
      (ibuffer-default-sorting-mode 'major-mode))
  #+END_SRC

* additional keywords
  Some words like "FIXME" and "TODO" should be highlighted in every programming
  mode. It doesn't matter if they're inside comments or not.
  #+BEGIN_SRC emacs-lisp
    (defun my/add-new-keywords()
      (font-lock-add-keywords
       nil
       '(("\\<\\(FIXME\\|fixme\\)\\>" 1 'font-lock-warning-face prepend)
         ("\\<\\(TODO\\|todo\\)\\>" 1 'font-lock-warning-face prepend)
         ("\\<\\(BUG\\|bug\\)\\>" 1 'font-lock-warning-face prepend)
         ("\\<\\(NOTE\\|note\\)\\>" 1 'font-lock-constant-face prepend))))

    (add-hook 'prog-mode-hook #'my/add-new-keywords)
  #+END_SRC

* sane defaults
** visual
  #+BEGIN_SRC emacs-lisp
    ;; don't show a startup message
    (setq inhibit-startup-message t)
    ;; no blinking cursor
    (blink-cursor-mode -1)
    ;; highlight the current line
    (global-hl-line-mode)
    ;; column numbers
    (column-number-mode 1)
    ;; show matching parentheses
    (show-paren-mode)
    ;; disable scroll bar
    (add-to-list 'default-frame-alist '(vertical-scroll-bars . nil))
    ;; disable menu bar
    (add-to-list 'default-frame-alist '(menu-bar-lines . 0))
    ;; disable tool bar
    (add-to-list 'default-frame-alist '(tool-bar-lines . 0))
    ;; start emacs maximized
    (add-to-list 'default-frame-alist '(fullscreen . maximized))
    ;; use hack or consolas font
    (add-to-list 'default-frame-alist
                 (cons 'font
                       (cond ((eq system-type 'gnu/linux) "Hack-13")
                             ((eq system-type 'windows-nt) "Consolas-14"))))
    ;; pretty lambdas
    (add-hook 'emacs-lisp-mode-hook #'prettify-symbols-mode)
    (setq prettify-symbols-unprettify-at-point 'right-edge)
    ;; smoother scrolling
    (setq scroll-conservatively most-positive-fixnum)
    ;; resize windows proportionally
    (setq window-combination-resize t)
    ;; hide minor-modes in mode-line
    (setq mode-line-modes '(:eval (propertize " [%m] "
                                              'face 'font-lock-constant-face)))
  #+END_SRC

** convenience
  #+BEGIN_SRC emacs-lisp
    ;; save backups in .emacs.d
    (setq backup-directory-alist '(("." . "~/.emacs.d/.backups")))
    ;; save auto-save files (#file#) in .emacs.d
    (let ((auto-save-dir "~/.emacs.d/.autosaves/"))
      (make-directory auto-save-dir t)
      (setq auto-save-file-name-transforms `((".*" ,auto-save-dir t))))
    ;; update files when they change on disk
    (global-auto-revert-mode 1)
    ;; ask before killing emacs
    (setq confirm-kill-emacs #'y-or-n-p)
    ;; automatically go to the help window
    (setq help-window-select t)
    ;; show help on hover
    (customize-set-variable 'help-at-pt-display-when-idle t)
    ;; sentences have a single space at the end
    (setq sentence-end-double-space nil)
    ;; typed text replaces the selected text
    (delete-selection-mode 1)
    ;; don't accelerate mouse wheel scrolling
    (setq mouse-wheel-progressive-speed nil)
    ;; show off-screen matching parens when typing
    (setq blink-matching-paren 'echo)
    ;; add matching pairs automatically
    (electric-pair-mode 1)
    ;; make *scratch* unkillable
    (with-current-buffer "*scratch*"
      (emacs-lock-mode 'kill))
    ;; reduce the delay for creating frames and for using undo-tree
    (when (eq system-type 'gnu/linux)
      (setq x-wait-for-event-timeout nil))
    ;; ask "(y/n)?" and not "(yes/no)?"
    (fset #'yes-or-no-p #'y-or-n-p)
    ;; more information on describe-key
    (define-key (current-global-map) (kbd "C-h c") #'describe-key)
    ;; add a newline at the end of files
    (setq require-final-newline t)
    ;; no tabs
    (customize-set-variable 'indent-tabs-mode nil)
  #+END_SRC

* custom functions
  Small functions used in the keybindings.
** edit init file
   Function used to quickly edit my settings.org file.
  #+BEGIN_SRC emacs-lisp
    (defun my/edit-init-file ()
      "Open the init file."
      (interactive)
      (find-file (expand-file-name "settings.org" user-emacs-directory)))
  #+END_SRC

** indent buffer
   This function removes trailing whitespace, indents the current buffer and
   removes tabs. For Makefiles it only removes trailing whitespace.
  #+BEGIN_SRC emacs-lisp
    (defun my/indent-buffer ()
      "Indent and untabify the current buffer."
      (interactive)
      (save-excursion
        (delete-trailing-whitespace)
        (unless (derived-mode-p 'makefile-mode)
          (indent-region (point-min) (point-max) nil)
          (untabify (point-min) (point-max)))))

    (global-set-key (kbd "C-c i") #'my/indent-buffer)
  #+END_SRC

** toggle maximize buffer
   Original from https://gist.github.com/3402786.
  #+BEGIN_SRC emacs-lisp
    (defun my/toggle-maximize-buffer ()
      "Maximize the current buffer and save the window configuration.
    A second call restores the old window configuration."
      (interactive)
      (if (and (= 1 (length (window-list)))
               (assoc ?_ register-alist))
          (jump-to-register ?_)
        (window-configuration-to-register ?_)
        (delete-other-windows)))

    (global-set-key (kbd "C-x 1") #'my/toggle-maximize-buffer)
  #+END_SRC

** ssh connect
  #+BEGIN_SRC emacs-lisp
    (defun my/ssh-connect (host user)
      "Connect to the home directory of a foreign HOST as USER using SSH."
      (interactive "Mhost: \nMuser: ")
      (message "connecting to %s@%s ..." user host)
      (find-file (concat "/ssh:" user "@" host ":~")))
  #+END_SRC

** duckduckgo dwim
  #+BEGIN_SRC emacs-lisp
    (defun my/ddg-dwim ()
      "Search duckduckgo.com for the symbol at point or the region if active."
      (interactive)
      (let* ((symbol (or (thing-at-point 'symbol t) ""))
             (user-input
              (if (region-active-p)
                  (buffer-substring-no-properties (region-beginning)
                                                  (region-end))
                (read-string (format "search term [default: \"%s\"]: " symbol)
                             nil
                             'ddg-input-history
                             symbol))))
        (thread-last user-input
          url-hexify-string
          (concat "https://duckduckgo.com/?q=")
          browse-url)))

    (global-set-key (kbd "C-c g") #'my/ddg-dwim)
  #+END_SRC

** kill current buffer
   Kill the current buffer without asking.
  #+BEGIN_SRC emacs-lisp
    (defun my/kill-current-buffer ()
      "Kill the current buffer."
      (interactive)
      (kill-buffer (current-buffer)))

    (global-set-key (kbd "C-x k") #'my/kill-current-buffer)
  #+END_SRC

** yank words to minibuffer
  #+BEGIN_SRC emacs-lisp
    (defun my/minibuffer-yank-word (&optional arg)
      "Yank ARG words from current line into minibuffer."
      (interactive "p")
      (let (text)
        (with-current-buffer (cadr (buffer-list))
          (let* ((beg (point))
                 (bol (line-beginning-position))
                 (eol (line-end-position))
                 (end (progn (forward-word arg)
                             (goto-char (max bol (min (point) eol))))))
            (setq text (buffer-substring-no-properties beg end))
            (pulse-momentary-highlight-region beg end 'region)))
        (when text
          (insert (replace-regexp-in-string "  +" " " text t t)))))

    (define-key minibuffer-local-map (kbd "M-j") #'my/minibuffer-yank-word)
  #+END_SRC

** confirm closing emacsclient frames
  #+BEGIN_SRC emacs-lisp
    (defun my/confirm-delete-frame (&optional arg)
      "Ask for confirmation when closing frames.
    With prefix ARG, silently save all file-visiting buffers, then
    delete the selected frame."
      (interactive "P")
      (when (y-or-n-p "Close frame? ")
        (save-some-buffers arg)
        (delete-frame))
      (message ""))

    (when (daemonp)
      (global-set-key [remap save-buffers-kill-terminal] #'my/confirm-delete-frame))
  #+END_SRC

** open file externally
  #+BEGIN_SRC emacs-lisp
    (defun my/open-externally (file)
      "Open FILE in an external application."
      (interactive "f")
      (let ((file (expand-file-name file)))
        (cond
         ((eq system-type 'gnu/linux)
          (start-process "" nil "setsid" "-w" "xdg-open" file))
         ((eq system-type 'darwin)
          (shell-command (concat "open " (shell-quote-argument file))))
         ((eq system-type 'windows-nt)
          (w32-shell-execute "open" file)))))

    (define-key evil-normal-state-map (kbd "SPC f e") #'my/open-externally)
  #+END_SRC

** create TAGS file
  #+BEGIN_SRC emacs-lisp
    (defun my/create-tags (dir extensions)
      "Create TAGS for files with EXTENSIONS in directory DIR."
      (interactive "Dproject root: \nMenter file extensions: ")
      (let* ((default-directory dir)
             (extensions (split-string extensions))
             (extensions (mapcar (lambda (e) (concat "*." e))
                              extensions)))
        (shell-command
         (concat
          (find-cmd
           '(prune (name ".git" ".svn" ".CVS"))
           `(or (iname ,@extensions)))
          " | etags -"))
        (let ((tags-revert-without-query t))
          (visit-tags-table dir))))
  #+END_SRC

