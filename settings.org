#+TITLE: emacs settings
* package setup
  Bootstraps use-package and sets the repositories.
  #+BEGIN_SRC emacs-lisp :results silent
    ;; set up package sources
    (require 'package)

    (setf package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                             ("melpa" . "https://melpa.org/packages/")))
    (package-initialize)

    ;; bootstrap `use-package'
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
  #+END_SRC

* company
  Generic settings for the completion framework company.
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package company
      :ensure t
      :config
      (add-hook 'after-init-hook #'global-company-mode)
      (setf company-idle-delay 0.1)
      (setf company-minimum-prefix-length 1))
  #+END_SRC

* evil
  Vim emulation for emacs.
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package evil
      :ensure t
      :demand
      :init
      (setf evil-want-integration nil)
      :bind*
      (:map evil-normal-state-map
            ("SPC e i" . my/edit-init-file)
            ("SPC q n" . save-buffers-kill-emacs)
            ("SPC n d" . narrow-to-defun)
            ("SPC n w" . widen)
            ("SPC n p" . my/narrow-to-paragraph)
            ("SPC r s" . my/ssh-connect))
      (:map evil-visual-state-map
            ("SPC n r" . narrow-to-region))
      :config
      ;; define "SPC v" as alias for "C-x v"
      (define-key evil-normal-state-map (kbd "SPC v")
        (lookup-key (current-global-map) (kbd "C-x v")))

      (evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle)
      (evil-define-key 'normal org-mode-map (kbd "TAB") #'org-cycle)

      (setq evil-normal-state-tag
            (propertize " {N} " 'face '((:foreground "green")))
            evil-emacs-state-tag
            (propertize " {E} " 'face '((:foreground "orange")))
            evil-insert-state-tag
            (propertize " {I} " 'face '((:foreground "red")))
            evil-motion-state-tag
            (propertize " {M} " 'face '((:foreground "deep sky blue")))
            evil-visual-state-tag
            (propertize " {V} " 'face '((:foreground "grey80")))
            evil-replace-state-tag
            (propertize " {R} " 'face '((:foreground "yellow")))
            evil-operator-state-tag
            (propertize " {O} " 'face '((:foreground "purple"))))

      (evil-mode))

    (use-package evil-collection
      :ensure t
      :defer 1
      :config
      (setq evil-collection-key-blacklist (list "SPC"))
      (evil-collection-init))

    (use-package evil-mc
      :ensure t
      :bind* (:map evil-normal-state-map
                   ("C-n" . evil-mc-make-and-goto-next-match)
                   ("C-p" . evil-mc-make-and-goto-prev-match))
      :config
      (global-evil-mc-mode 1))
  #+END_SRC

* ivy
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package ivy
      :ensure t
      :defer t
      :config
      (setq ivy-height 20
            ivy-re-builders-alist '((t . ivy--regex-ignore-order)))
      (ivy-mode))

    (use-package swiper
      :ensure t
      :bind* (("C-c f" . swiper)))

    (use-package counsel
      :ensure t
      :bind* (("M-x" . counsel-M-x)
              ("C-x C-f" . counsel-find-file)
              ("C-c d" . counsel-semantic-or-imenu)
              ("C-c r" . counsel-recentf)
              ("C-c k" . counsel-yank-pop))
      (:map evil-normal-state-map
            ("SPC SPC" . counsel-M-x)
            ("SPC f f" . counsel-find-file)
            ("SPC f r" . counsel-recentf)
            ("SPC f l" . counsel-locate))
      :config
      (setf (cdr (assoc 'counsel-M-x ivy-initial-inputs-alist)) "")
      (setq counsel-async-filter-update-time 100000) ;; every 0.1 seconds
      (counsel-mode))

    (use-package counsel-gtags
      :ensure t
      :bind* (:map evil-normal-state-map
                   ("SPC t c" . counsel-gtags-create-tags)
                   ("SPC t s" . counsel-gtags-dwim)))
  #+END_SRC

* dired
#+BEGIN_SRC emacs-lisp :results silent
  (use-package dired-x
    :bind*
    (:map evil-normal-state-map
          ("SPC f d" . dired-jump-other-window))
    (:map dired-mode-map
          ("<tab>" . dired-omit-mode))
    :config
    (setq dired-auto-revert-buffer t)
    (setq-default dired-omit-mode t)
    (setq dired-omit-files "^\\.?#\\|^\\.[^.\n].*$"))
#+END_SRC

* occur
#+BEGIN_SRC emacs-lisp :results silent
  (use-package occur
    :hook (occur-mode . next-error-follow-minor-mode))
#+END_SRC

* ace-jump
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package ace-jump-mode
      :ensure t
      :bind* (:map evil-normal-state-map
                   ("SPC j" . ace-jump-word-mode)))
  #+END_SRC

* which key
  #+BEGIN_SRC emacs-lisp :results silent
    ;; show keybindings while typing
    (use-package which-key
      :ensure t
      :defer 1
      :config
      (which-key-mode)
      (setf which-key-idle-delay 0.5)
      (which-key-add-key-based-replacements
        "SPC b" "bookmarks"
        "SPC e" "edit"
        "SPC f" "files"
        "SPC h" "help"
        "SPC n" "narrow"
        "SPC p" "project"
        "SPC q" "quit"
        "SPC r" "remote"
        "SPC s" "smartparens"
        "SPC t" "tags"
        "SPC v" "version control"
        "SPC w" "window management"))
  #+END_SRC

* flycheck
  #+BEGIN_SRC emacs-lisp :results silent
    ;; syntax checking
    (use-package flycheck
      :ensure t
      :defer t
      :hook (prog-mode . flycheck-mode))
  #+END_SRC

* yasnippet
  #+BEGIN_SRC emacs-lisp :results silent
    ;; snippet completion
    (use-package yasnippet
      :ensure t
      :bind* ("C-c y" . yas-insert-snippet)
      :config
      (yas-global-mode 1))
  #+END_SRC
  Also load the snippets.
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package yasnippet-snippets
      :ensure t
      :defer t)
  #+END_SRC

* smartparens
  #+BEGIN_SRC emacs-lisp :results silent
    ;; better bracket handling
    (use-package smartparens
      :ensure t
      :demand
      :bind*
      (:map evil-normal-state-map
            ("SPC s s" . sp-split-sexp))
      :config
      (require 'smartparens-config)
      (setq-default sp-escape-quotes-after-insert nil)

      (smartparens-global-mode 1)
      (show-smartparens-global-mode 1))
  #+END_SRC

* theme
  #+BEGIN_SRC emacs-lisp :results silent
    ;; theme settings
    (use-package gruvbox-theme
      :ensure t
      :init
      (defun my/morning-p ()
        "Return non-nil when it's morning (06:00 - 12:00)."
        (and (time-less-p nil
                          (date-to-time (format-time-string "%b %d 12:00 %Y")))
             (time-less-p (date-to-time (format-time-string "%b %d 06:00 %Y"))
                          nil)))
      :config
      (defvar theme-already-loaded nil)
      (push (lambda (frame)
              (unless theme-already-loaded
                (setq theme-already-loaded t)
                (with-selected-frame frame
                  (load-theme (if (my/morning-p)
                                  'gruvbox-light-hard
                                'gruvbox-dark-hard)
                              t))))
            after-make-frame-functions))
  #+END_SRC

* eshell
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package eshell
      :ensure t
      :bind* (("C-c s" . my/toggle-eshell))
      :hook
      (eshell-mode . (lambda ()
                       (local-set-key (kbd "C-r") #'counsel-esh-history)))
      :config
      (evil-set-initial-state 'eshell-mode 'emacs)
      (add-hook 'eshell-mode-hook (lambda ()
                                    (setq-local scroll-margin 0)
                                    (setq-local global-hl-line-mode nil)
                                    (setq-local company-idle-delay nil)))
      (setf eshell-cmpl-ignore-case t
            eshell-error-if-no-glob t
            eshell-hist-ignoredups t
            eshell-scroll-to-bottom-on-input t))

    (defun my/toggle-eshell ()
      "Open a new eshell window or switch to an existing one."
      (interactive)
      (let* ((eshell-buffer-name "*eshell*")
             (eshell-window (get-buffer-window eshell-buffer-name))
             (current-directory default-directory)
             (cd-to-default-dir (lambda ()
                                  (unless (string= default-directory
                                                   current-directory)
                                    (eshell/cd current-directory)
                                    (eshell-reset)))))
        (cond ((eq (selected-window) eshell-window)
               (delete-window))
              ((window-live-p eshell-window)
               (select-window eshell-window)
               (funcall cd-to-default-dir))
              (t
               (select-window
                (split-window (frame-root-window)
                              (round (* (window-height (frame-root-window))
                                        0.6666))
                              'below))
               (eshell)
               (funcall cd-to-default-dir)))))

  #+END_SRC

* whitespace
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package whitespace
      :ensure t
      :hook (prog-mode . whitespace-mode)
      :config
      (setq-default
       fill-column 80
       whitespace-line-column fill-column
       whitespace-style '(face trailing lines-tail)))
  #+END_SRC

* C/C++ config
  #+BEGIN_SRC emacs-lisp :results silent
    (defalias 'cxx-mode #'c++-mode)

    (use-package clang-format
      :ensure t
      :defer t)

    (use-package cc-mode
      :bind* (:map c-mode-map
                   ("C-c i" . clang-format-buffer)
                   ("C-c C-c" . comment-dwim))
      :bind* (:map c++-mode-map
                   ("C-c i" . clang-format-buffer)
                   ("C-c C-c" . comment-dwim))
      :hook
      ((c-mode . (lambda ()
                   (setq-local flycheck-gcc-language-standard "c99")
                   (setq-local flycheck-clang-language-standard "c99")))
       (c++-mode . (lambda ()
                     (setq-local flycheck-gcc-language-standard "c++11")
                     (setq-local flycheck-clang-language-standard "c++11")))))

    (setq-default c-basic-offset 4)
  #+END_SRC

* CMake config
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package cmake-mode
      :ensure t
      :config
      (setq cmake-tab-width 4))
  #+END_SRC

* compile
#+BEGIN_SRC emacs-lisp :results silent
  (use-package compile
    :defer t
    :config
    (setq compilation-scroll-output 'first-error))
#+END_SRC

* XML
#+BEGIN_SRC emacs-lisp :results silent
  (use-package nxml-mode
    :defer t
    :config
    (setq nxml-child-indent 4))
#+END_SRC

* LaTeX config
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package tex-site
      :ensure auctex
      :hook (LaTeX-mode . TeX-source-correlate-mode)
      :defer t
      :config
      (setenv "XLIB_SKIP_ARGB_VISUALS" nil)
      (setf font-latex-fontify-sectioning 1.0)
      (setq-default TeX-view-program-selection
                    (quote (((output-dvi has-no-display-manager) "dvi2tty")
                            ((output-dvi style-pstricks) "dvips and gv")
                            (output-pdf "Okular")
                            (output-dvi "xdvi")
                            (output-pdf "Evince")
                            (output-html "xdg-open")))))
  #+END_SRC
  Align the equal signs in bibtex
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package bibtex
      :ensure t
      :defer t
      :config
      (setf bibtex-align-at-equal-sign t))
  #+END_SRC

* bookmarks
  Some bookmark keybindings.
  #+BEGIN_SRC emacs-lisp :results silent
  (use-package bookmark
    :ensure t
    :bind* (:map evil-normal-state-map
                 ("SPC b l" . list-bookmarks)
                 ("SPC b s" . bookmark-set)
                 ("SPC b j" . bookmark-jump)))
  #+END_SRC

* projectile
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package projectile
      :ensure t
      :bind* (:map evil-normal-state-map
                   ("SPC p p" . projectile-switch-project)
                   ("SPC p f" . projectile-find-file)
                   ("SPC p c" . projectile-compile-project))
      :config
      (projectile-mode)
      (setq projectile-completion-system 'default)
      (setq projectile-enable-caching t)

      (push "CMakeLists.txt" projectile-project-root-files-top-down-recurring)

      ;; svn list is too slow in combination with svn externals
      (if (executable-find "fd")
          (setq projectile-svn-command "fd --color never --print0 --type f"))

      ;; define "SPC p" as additional prefix for projectile
      (define-key evil-normal-state-map (kbd "SPC p") #'projectile-command-map))
  #+END_SRC

* quickrun
#+BEGIN_SRC emacs-lisp :results silent
  (use-package quickrun
    :ensure t
    :bind* (("C-c x" . quickrun)))
#+END_SRC

* dash
#+BEGIN_SRC emacs-lisp :results silent
  (use-package counsel-dash
    :ensure t
    :init
    (defun my/view-docs-for-major-mode ()
      "Read the documentation for the programming language of the
  current major-mode. Use `counsel-dash-install-docset' or Zeal to
  download docsets."
      (interactive)
      (setq-local counsel-dash-docsets
                  (cdr (assoc major-mode '((sh-mode     . ("Bash"))
                                           (c-mode      . ("C"))
                                           (c++-mode    . ("C++" "Boost"))
                                           (lisp-mode   . ("Common_Lisp"))
                                           (cmake-mode  . ("CMake"))
                                           (latex-mode  . ("LaTeX"))
                                           (tex-mode    . ("LaTeX"))
                                           (python-mode . ("Python_2"))))))
      (if counsel-dash-docsets
          (call-interactively #'counsel-dash)
        (message "no docsets found for %s" major-mode)))
    :bind* (:map evil-normal-state-map
                 ("SPC h d" . my/view-docs-for-major-mode)))
#+END_SRC

* eyebrowse
#+BEGIN_SRC emacs-lisp :results silent
  (use-package eyebrowse
    :ensure t
    :bind* (:map evil-normal-state-map
                 ("SPC w c" . eyebrowse-create-window-config)
                 ("SPC w k" . eyebrowse-close-window-config)
                 ("SPC w n" . eyebrowse-next-window-config)
                 ("SPC w p" . eyebrowse-prev-window-config)
                 ("SPC w s" . eyebrowse-switch-to-window-config)
                 ("SPC w r" . eyebrowse-rename-window-config))
    :config
    (eyebrowse-mode)

    (defadvice eyebrowse-create-window-config (after
                                               my/rename-window-config
                                               activate)
      "After a window config has been created rename it."
      (call-interactively #'eyebrowse-rename-window-config))

    (setq eyebrowse-wrap-around t
          eyebrowse-new-workspace t
          eyebrowse-mode-line-separator "/"
          eyebrowse-tagged-slot-format "%t"
          eyebrowse-mode-line-left-delimiter " ["
          eyebrowse-mode-line-right-delimiter "] ")
    :custom-face
    (eyebrowse-mode-line-active ((t (:inherit font-lock-builtin-face)))))
#+END_SRC

* sane defaults
  #+BEGIN_SRC emacs-lisp :results silent
    ;; don't show a startup message
    (setf inhibit-startup-message t)

    ;; no menu-bar
    (menu-bar-mode -1)

    ;; no tool-bar
    (tool-bar-mode -1)

    ;; highlight the current line
    (global-hl-line-mode)

    ;; ask "(y/n)?" and not "(yes/no)?"
    (fset #'yes-or-no-p #'y-or-n-p)

    ;; more information on describe-key
    (define-key (current-global-map) (kbd "C-h c") #'describe-key)

    ;; no blinking cursor
    (blink-cursor-mode -1)

    ;; no scroll bar
    (scroll-bar-mode -1)

    ;; start emacs maximized
    (add-to-list 'default-frame-alist '(fullscreen . maximized))

    ;; use hack font
    (add-to-list 'default-frame-alist
    '(font . "Hack-13"))

    ;; column numbers
    (column-number-mode 1)

    ;; save backups in .emacs.d
    (setf backup-directory-alist '(("." . "~/.emacs.d/.saves")))

    ;; no tabs
    (setq-default indent-tabs-mode nil)

    ;; update files when they change on disk
    (global-auto-revert-mode 1)

    ;; save more recent files
    (setf recentf-max-saved-items 100)

    ;; ask before killing emacs
    (setf confirm-kill-emacs #'y-or-n-p)

    ;; show parentheses
    (show-paren-mode)

    ;; automatically go to the help window
    (setf help-window-select t)

    ;; smoother scrolling
    (setf scroll-conservatively most-positive-fixnum)

    ;; resize windows proportionally
    (setf window-combination-resize t)

    ;; sentences have a single space at the end
    (setf sentence-end-double-space nil)

    ;; no garbage collection in minibuffer
    (defun gc-minibuffer-setup-hook ()
      (setf gc-cons-threshold most-positive-fixnum))

    (defun gc-minibuffer-exit-hook ()
      (setf gc-cons-threshold 800000))

    (add-hook 'minibuffer-setup-hook #'gc-minibuffer-setup-hook)
    (add-hook 'minibuffer-exit-hook #'gc-minibuffer-exit-hook)

    ;; typed text replaces the selected text
    (delete-selection-mode 1)

    ;; hide minor-modes in mode-line
    (setf mode-line-modes '(:eval (propertize " [%m]"
                                              'face 'font-lock-constant-face)))

    ;; pretty lambdas
    (global-prettify-symbols-mode t)
    (setq prettify-symbols-unprettify-at-point 'right-edge)

  #+END_SRC

* more keybindings
  Small functions used in the keybindings.
  #+BEGIN_SRC emacs-lisp :results silent
    (defun my/edit-init-file ()
      "Open the init file."
      (interactive)
      (find-file (expand-file-name "settings.org" user-emacs-directory)))

    (defun my/indent-buffer ()
      "Indent the current buffer."
      (interactive)
      (save-excursion
        (delete-trailing-whitespace)
        (unless (string-match (rx string-start
                                  "makefile"
                                  (* anything)
                                  "mode"
                                  string-end)
                              (symbol-name major-mode))
          (indent-region (point-min) (point-max) nil)
          (untabify (point-min) (point-max)))))

    ;; from https://gist.github.com/3402786
    (defun my/toggle-maximize-buffer ()
      "Maximize buffer"
      (interactive)
      (if (and (= 1 (length (window-list)))
               (assoc ?_ register-alist))
          (jump-to-register ?_)
        (progn
          (window-configuration-to-register ?_)
          (delete-other-windows))))

    (defun my/narrow-to-paragraph ()
      "Narrow to the paragraph at point."
      (interactive)
      (save-mark-and-excursion
       (mark-paragraph)
       (narrow-to-region (point)
                         (mark))))

    (defun my/local-hosts ()
      "Return a list of hosts in the local network."
      (split-string
       (shell-command-to-string
        "ip neigh show nud stale nud reachable | cut -d ' ' -f 1")))

    (defun my/ssh-connect ()
      "Connect to the home directory of a foreign host."
      (interactive)
      (let ((host (completing-read "host: " (my/local-hosts)))
            (user (read-string "user: ")))
        (message "connecting to %s@%s ..." user host)
        (find-file (concat "/ssh:" user "@" host ":~"))))

    (defun my/ddg-dwim ()
      "Search duckduckgo.com for the symbol at point or the region if active."
      (interactive)
      (let ((search-this
             (if (region-active-p)
                 (buffer-substring-no-properties (region-beginning)
                                                 (region-end))
               (thing-at-point 'symbol t))))
        (browse-url (concat "https://duckduckgo.com/?q="
                            (url-hexify-string (read-string "search term: "
                                                            search-this
                                                            'use-history))))))

  #+END_SRC

  Emacs C-x and C-c keybindings.
  #+BEGIN_SRC emacs-lisp :results silent

    (defun my/kill-current-buffer (prefix-arg)
      "Kill the current buffer."
      (interactive "P")
      (kill-buffer (current-buffer)))

    (global-set-key (kbd "C-x 1") #'my/toggle-maximize-buffer)
    (global-set-key (kbd "C-c i") #'my/indent-buffer)
    (global-set-key (kbd "C-x k") #'my/kill-current-buffer)
    (global-set-key (kbd "C-c m") #'man)
    (global-set-key (kbd "C-c g") #'my/ddg-dwim)
    (global-set-key (kbd "C-x C-b") #'ibuffer-other-window)
  #+END_SRC

