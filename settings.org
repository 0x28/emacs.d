#+TITLE: emacs settings
* package setup
  Bootstraps use-package and sets the repositories.
  #+BEGIN_SRC emacs-lisp :results silent
    ;; set up package sources
    (require 'package)

    (setf package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                             ("melpa" . "https://melpa.org/packages/")))
    (package-initialize)

    ;; bootstrap `use-package'
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))

    ;; require `use-package' during compilation
    ;; (eval-when-compile
    ;;   (require 'use-package))
  #+END_SRC

* company
  Generic settings for the completion framework company.
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package company
      :ensure t
      :config
      (add-hook 'after-init-hook #'global-company-mode)
      (setf company-idle-delay 0.1)
      (setf company-minimum-prefix-length 1))
  #+END_SRC

* helm
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package helm
      :ensure t
      :bind* (("M-x" . helm-M-x)
              ("C-x C-f" . helm-find-files)
              ("C-c f" . helm-occur)
              ("C-c d" . helm-semantic-or-imenu)
              ("C-c r" . helm-recentf)
              ("C-c k" . helm-show-kill-ring))
      :config
      (require 'helm-config)
      (require 'helm-files)
      (helm-mode 1)
      (define-key helm-find-files-map "\t" 'helm-execute-persistent-action))

    (use-package helm-descbinds
      :ensure t
      :config
      (helm-descbinds-mode))

    (use-package helm-gtags
      :ensure t
      :defer 30
      :config
      (setf helm-gtags-maximum-candidates 1000)
      (define-key evil-normal-state-map (kbd "SPC t s") #'helm-gtags-select))
  #+END_SRC

* evil
  Vim emulation for emacs.
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package evil
      :after helm
      :after helm-locate
      :ensure t
      :init
      (setf evil-want-integration nil)
      (require 'evil) ;; needed for :bind <map>
      :bind*
      (:map evil-normal-state-map
            ("SPC SPC" . helm-M-x)
            ("SPC e i" . edit-init-file)
            ("SPC q n" . save-buffers-kill-emacs)
            ("SPC f f" . helm-find-files)
            ("SPC f r" . helm-recentf)
            ("SPC f l" . helm-locate)
            ("SPC f d" . dired-jump))
      :config
      ;; define "SPC v" as alias for "C-x v"
      (define-key evil-normal-state-map (kbd "SPC v")
        (lookup-key (current-global-map) (kbd "C-x v")))
      (evil-mode))

    (use-package evil-collection
      :after evil
      :ensure t
      :init (evil-collection-init))

    (use-package evil-mc
      :ensure t
      :defer 5
      :config
      (global-evil-mc-mode 1))
  #+END_SRC

* ace-jump
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package ace-jump-mode
      :ensure t
      :defer t
      :bind* (:map evil-normal-state-map
                   ("SPC j" . ace-jump-word-mode)))
  #+END_SRC

* which key
  #+BEGIN_SRC emacs-lisp :results silent
    ;; show keybindings while typing
    (use-package which-key
      :ensure t
      :config
      (which-key-mode)
      (setf which-key-idle-delay 0.5))
  #+END_SRC

* flycheck
  #+BEGIN_SRC emacs-lisp :results silent
    ;; syntax checking
    (use-package flycheck
      :ensure t
      :config
      (global-flycheck-mode t))
  #+END_SRC

* yasnippet
  #+BEGIN_SRC emacs-lisp :results silent
    ;; snippet completion
    (use-package yasnippet
      :ensure t
      :defer t
      :bind* ("C-c y" . yas-insert-snippet)
      :config
      (yas-global-mode 1))
  #+END_SRC
  Also load the snippets.
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package yasnippet-snippets
      :ensure t
      :defer t)
  #+END_SRC

* smartparens
  #+BEGIN_SRC emacs-lisp :results silent
    ;; better bracket handling
    (use-package smartparens
      :ensure t
      :bind*
      (:map evil-normal-state-map
            ("SPC s s" . sp-split-sexp))
      :config
      (require 'smartparens-config)
      (smartparens-global-mode 1))
  #+END_SRC

* theme
  #+BEGIN_SRC emacs-lisp :results silent
    ;; theme settings
    (use-package darktooth-theme
      :ensure t
      :config
      (load-theme 'darktooth t))
  #+END_SRC

* eshell
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package eshell
      :after evil
      :ensure t
      :bind* (("C-c s" . toggle-eshell))
      :config
      (evil-set-initial-state 'eshell-mode 'emacs)
      (add-hook 'eshell-mode-hook (lambda ()
                                    (setq-local global-hl-line-mode nil)
                                    (setq-local company-idle-delay nil)))
      (setf eshell-cmpl-ignore-case t))

    (defvar toggle-eshell-window nil)

    (defun toggle-eshell ()
      "Open a new eshell window or switch to an existing one."
      (interactive)
      (cond ((eq (selected-window) toggle-eshell-window)
             (delete-window)
             (setf toggle-eshell-window nil))
            ((window-live-p toggle-eshell-window)
             (select-window toggle-eshell-window))
            (t
             (setf toggle-eshell-window
                   (split-window (frame-root-window)
                                 (round (* (window-height (frame-root-window))
                                           0.6666))
                                 'below))
             (select-window toggle-eshell-window)
             (eshell))))

  #+END_SRC

* whitespace
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package whitespace
      :ensure t
      :config
      (global-whitespace-mode 1)
      (setq-default
       fill-column 80
       whitespace-line-column fill-column
       whitespace-style '(face trailing lines-tail)))
  #+END_SRC

* C/C++ config
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package clang-format
      :ensure t
      :defer t)

    (use-package cc-mode
      :bind* (:map c-mode-map
              ("C-c i" . clang-format-buffer)
              ("C-c C-c" . comment-dwim))
      :bind* (:map c++-mode-map
              ("C-c i" . clang-format-buffer)
              ("C-c C-c" . comment-dwim))
      :config
      (add-hook 'c++-mode-hook
                (lambda () (setf flycheck-gcc-language-standard "c++11"
                                 flycheck-clang-language-standard "c++11"))))

    (setq-default c-basic-offset 4)
  #+END_SRC

* LaTeX config
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package tex-site
      :ensure auctex
      :hook (LaTeX-mode . TeX-source-correlate-mode)
      :config
      (setenv "XLIB_SKIP_ARGB_VISUALS" nil)
      (setf font-latex-fontify-sectioning 1.0)
      (setq-default TeX-view-program-selection
                    (quote (((output-dvi has-no-display-manager) "dvi2tty")
                            ((output-dvi style-pstricks) "dvips and gv")
                            (output-pdf "Okular")
                            (output-dvi "xdvi")
                            (output-pdf "Evince")
                            (output-html "xdg-open")))))
  #+END_SRC
  Align the equal signs in bibtex
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package bibtex
      :ensure t
      :config
      (setf bibtex-align-at-equal-sign t))
  #+END_SRC

* bookmarks
  Some bookmark keybindings.
  #+BEGIN_SRC emacs-lisp :results silent
  (use-package bookmark
    :ensure t
    :bind* (:map evil-normal-state-map
                 ("SPC b l" . list-bookmarks)
                 ("SPC b s" . bookmark-set)
                 ("SPC b j" . bookmark-jump)))
  #+END_SRC
* sane defaults
  #+BEGIN_SRC emacs-lisp :results silent
    ;; don't show a startup message
    (setf inhibit-startup-message t)

    ;; no menu-bar
    (menu-bar-mode -1)

    ;; no tool-bar
    (tool-bar-mode -1)

    ;; highlight the current line
    (global-hl-line-mode)

    ;; ask "(y/n)?" and not "(yes/no)?"
    (fset #'yes-or-no-p #'y-or-n-p)

    ;; more information on describe-key
    (define-key (current-global-map) (kbd "C-h c") #'describe-key)

    ;; no blinking cursor
    (blink-cursor-mode -1)

    ;; no scroll bar
    (scroll-bar-mode -1)

    ;; start emacs maximized
    (add-to-list 'default-frame-alist '(fullscreen . maximized))

    ;; use hack font
    (add-to-list 'default-frame-alist
    '(font . "Hack-13"))

    ;; column numbers
    (column-number-mode 1)

    ;; save backups in .emacs.d
    (setf backup-directory-alist '(("." . "~/.emacs.d/.saves")))

    ;; no tabs
    (setq-default indent-tabs-mode nil)

    ;; update files when they change on disk
    (global-auto-revert-mode 1)

    ;; save more recent files
    (setf recentf-max-saved-items 100)

    ;; ask before killing emacs
    (setf confirm-kill-emacs #'y-or-n-p)

    ;; show parentheses
    (show-paren-mode)

    ;; no garbage collection in minibuffer
    (defun gc-minibuffer-setup-hook ()
      (setf gc-cons-threshold most-positive-fixnum))

    (defun gc-minibuffer-exit-hook ()
      (setf gc-cons-threshold 800000))

    (add-hook 'minibuffer-setup-hook #'gc-minibuffer-setup-hook)
    (add-hook 'minibuffer-exit-hook #'gc-minibuffer-exit-hook)

    ;; hide minor-modes in mode-line
    (setf mode-line-modes '(:eval (propertize " [%m]"
                                              'face 'font-lock-constant-face)))
  #+END_SRC

* more keybindings
  Small functions used in the keybindings.
  #+BEGIN_SRC emacs-lisp :results silent
    (defun edit-init-file ()
      "Open the init file."
      (interactive)
      (find-file (expand-file-name "settings.org" user-emacs-directory)))

    (defun indent-buffer ()
      "Indent the current buffer."
      (interactive)
      (save-excursion
        (delete-trailing-whitespace)
        (unless (string-match (rx string-start
                                  "makefile"
                                  (* anything)
                                  "mode"
                                  string-end)
                              (symbol-name major-mode))
          (indent-region (point-min) (point-max) nil)
          (untabify (point-min) (point-max)))))

    ;; from https://gist.github.com/3402786
    (defun toggle-maximize-buffer ()
      "Maximize buffer"
      (interactive)
      (if (and (= 1 (length (window-list)))
               (assoc ?_ register-alist))
          (jump-to-register ?_)
        (progn
          (window-configuration-to-register ?_)
          (delete-other-windows))))
  #+END_SRC

  Emacs C-x and C-c keybindings.
  #+BEGIN_SRC emacs-lisp :results silent

    (global-set-key (kbd "C-x 1") #'toggle-maximize-buffer)
    (global-set-key (kbd "C-c i") #'indent-buffer)
    (global-set-key (kbd "C-x k") #'kill-this-buffer)
    (global-set-key (kbd "C-c m") #'man)
    (global-set-key (kbd "C-x C-b") (lambda ()
                                      (interactive)
                                      (ibuffer t)))
  #+END_SRC
